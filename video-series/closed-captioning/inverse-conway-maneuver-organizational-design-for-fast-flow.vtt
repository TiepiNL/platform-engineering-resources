WEBVTT

00:00:01.060 --> 00:00:04.600
Hi there, I'm Tom Peperkamp,
a platform Product Owner,

00:00:04.980 --> 00:00:08.080
back with a bonus episode in
our Platform Engineering series.

00:00:08.980 --> 00:00:11.040
We have journeyed through
the evolution of DevOps,

00:00:11.480 --> 00:00:13.460
demystified Internal
Developer Platforms,

00:00:14.040 --> 00:00:15.940
embraced the
Platform-as-a-Product mindset,

00:00:16.540 --> 00:00:18.400
and charted the course
from Vision to Goal.

00:00:19.480 --> 00:00:22.580
But what if the structure of our
teams is fundamentally shaping

00:00:22.580 --> 00:00:25.040
or hindering our technical
architecture and flow?

00:00:26.250 --> 00:00:29.840
Today, we're exploring the
Inverse Conway Maneuver:

00:00:30.340 --> 00:00:32.220
organizational
design for fast flow.

00:00:33.180 --> 00:00:34.960
We'll unpack the
famous Conway's Law

00:00:35.360 --> 00:00:39.040
and see how our communication
paths dictate our system designs.

00:00:39.640 --> 00:00:42.680
Then, we'll explore how
to flip this law on its head!

00:00:43.700 --> 00:00:46.060
Can we intentionally
design our teams

00:00:46.060 --> 00:00:47.840
to achieve the
architecture we need?

00:00:48.980 --> 00:00:50.960
Along the way,
we'll touch on

00:00:50.960 --> 00:00:53.600
why some setups feel like

00:00:53.600 --> 00:00:56.780
a frustrating 'man behind the
curtain' from the Wizard of Oz,

00:00:57.520 --> 00:01:00.860
how we can aim for the reliable
self-service of a vending machine,

00:01:00.860 --> 00:01:04.519
and ultimately pave a smooth
'Yellow Brick Road' for our developers.

00:01:05.660 --> 00:01:09.800
How do we engineer our
organization for success? Let's dive in!

00:01:13.080 --> 00:01:16.860
Let's kick things off by understanding
the foundation: Conway's Law.

00:01:18.120 --> 00:01:21.460
Back in 1968, computer
scientist Melvin Conway

00:01:21.460 --> 00:01:25.600
made a profound observation
about the relationship between

00:01:25.620 --> 00:01:28.000
how we organize
ourselves and what we build.

00:01:29.620 --> 00:01:30.860
His original wording was:

00:01:31.720 --> 00:01:35.120
"Any organization that designs
a system (defined broadly)...

00:01:35.560 --> 00:01:37.520
...will produce a
design whose structure...

00:01:37.520 --> 00:01:39.880
...is a copy of the organization's
communication structure."

00:01:41.840 --> 00:01:43.260
Think about that for a moment.

00:01:43.940 --> 00:01:46.440
It suggests that the way
our teams talk to each other,

00:01:46.440 --> 00:01:49.200
or don't talk to each other,

00:01:49.200 --> 00:01:52.940
inevitably shapes the architecture
of the software we create.

00:01:54.040 --> 00:01:57.980
This law implies that if your organization
is structured in functional silos,

00:01:58.480 --> 00:01:59.780
with walls between teams,

00:01:59.980 --> 00:02:02.960
the systems you build
will likely mirror those silos,

00:02:03.580 --> 00:02:07.440
making smooth end-to-end
flow incredibly difficult to achieve.

00:02:08.479 --> 00:02:10.700
While it's an
observation from 1968,

00:02:11.580 --> 00:02:14.260
this 'mirroring' effect
remains a powerful lens

00:02:14.260 --> 00:02:17.880
to understand why certain
organizational structures

00:02:18.100 --> 00:02:21.180
persistently create
friction in modern systems.

00:02:21.740 --> 00:02:23.440
It helps diagnose problems,

00:02:24.140 --> 00:02:26.500
even if the solutions lie
in more recent principles.

00:02:29.980 --> 00:02:32.600
Now, if Conway's Law tells us

00:02:32.600 --> 00:02:35.040
that our organizational
communication structure

00:02:35.040 --> 00:02:37.320
will be mirrored in
our system design,

00:02:37.620 --> 00:02:40.400
what happens when we
try to ignore that reality?

00:02:41.860 --> 00:02:45.840
The authors of "Team Topologies"
identify several common obstacles

00:02:45.840 --> 00:02:48.920
that prevent teams from
achieving a fast flow of change.

00:02:50.260 --> 00:02:52.920
Look at this diagram,
taken directly from their book.

00:02:53.740 --> 00:02:56.260
Notice one key
obstacle listed right there:

00:02:57.200 --> 00:02:58.680
"Pushing Against Conway’s Law".

00:03:00.160 --> 00:03:02.640
This means trying to
force a system architecture

00:03:02.640 --> 00:03:07.320
that fundamentally clashes with how
your teams are structured and communicate.

00:03:08.060 --> 00:03:11.260
It's like trying to fit a square
pack into a round hole.

00:03:12.160 --> 00:03:16.220
When the natural communication pathways
don't support the desired architecture,

00:03:16.820 --> 00:03:21.360
you introduce friction, dependencies,
misunderstandings, and delays.

00:03:22.440 --> 00:03:24.420
You're essentially
swimming against the current,

00:03:24.980 --> 00:03:29.340
and that inevitably slows things down,
blocking the smooth flow we're aiming for.

00:03:30.600 --> 00:03:34.960
It often underlies many of the
other obstacles you see listed here.

00:03:38.020 --> 00:03:39.980
This comic hits the nail
on the head, doesn't it?

00:03:41.060 --> 00:03:42.520
If Conway's Law holds true

00:03:43.500 --> 00:03:46.300
that our communication
structures dictate our system design,

00:03:46.780 --> 00:03:49.760
and management is responsible
for defining those structures,

00:03:50.800 --> 00:03:53.620
well, the punchline
follows logically:

00:03:54.700 --> 00:03:57.500
Management ends up designing
the software architecture,

00:03:57.514 --> 00:03:59.600
whether
they realize it or not!

00:04:01.240 --> 00:04:03.140
This brings us
to a crucial point:

00:04:03.700 --> 00:04:05.640
The role of
engineering managers,

00:04:05.980 --> 00:04:09.340
and indeed all leadership
involved in organizational design,

00:04:09.880 --> 00:04:12.640
extends far beyond
traditional people management.

00:04:13.760 --> 00:04:16.580
The way they shape the teams,
define their boundaries,

00:04:17.000 --> 00:04:21.179
and influence their communication
patterns – the 'team-of-teams' structure –

00:04:21.839 --> 00:04:24.980
has a direct and profound
impact on the success,

00:04:25.400 --> 00:04:28.540
maintainability, and adaptability
of the digital products being built.

00:04:29.940 --> 00:04:33.540
It's organizational engineering with
significant technical consequences.

00:04:36.880 --> 00:04:40.520
So, if management inadvertently
designs our architecture

00:04:40.560 --> 00:04:42.320
through organizational
structure,

00:04:42.820 --> 00:04:44.440
how should we
respond to this reality?

00:04:45.820 --> 00:04:48.920
Martin Fowler outlines three
main approaches on his website.

00:04:50.300 --> 00:04:52.820
First, you could simply
ignore Conway's Law.

00:04:53.820 --> 00:04:55.080
Maybe you haven't heard of it,

00:04:55.440 --> 00:04:59.660
or perhaps you think it doesn't
apply... (narrator: it does!).

00:05:00.880 --> 00:05:04.220
Fowler notes, "The first step
in dealing with Conway's Law...

00:05:04.220 --> 00:05:05.880
...is to know not to fight it."

00:05:07.360 --> 00:05:10.320
This leads to the
second option: accept it.

00:05:11.360 --> 00:05:14.740
Recognize its impact, and
consciously design your architecture

00:05:14.760 --> 00:05:18.020
so it doesn't clash with how
your teams naturally communicate.

00:05:19.260 --> 00:05:24.160
As Fowler says, "Accepting
Conway's Law is superior to ignoring it.”

00:05:26.310 --> 00:05:30.340
But there's a third, more proactive,
and often recommended option:

00:05:30.420 --> 00:05:32.140
the Inverse Conway Maneuver.

00:05:33.680 --> 00:05:35.260
This is where we
intentionally change

00:05:35.260 --> 00:05:37.740
the communication patterns
and team structures first

00:05:37.740 --> 00:05:41.220
to actively encourage the
desired software architecture.

00:05:42.700 --> 00:05:44.980
Instead of letting the org
structure dictate the system,

00:05:45.160 --> 00:05:48.140
we design the org structure
to enable the system we want.

00:05:49.260 --> 00:05:52.020
Let's delve deeper into
this powerful maneuver!

00:05:55.040 --> 00:05:58.540
So, how do we actually use
this inverse Conway maneuver?

00:05:58.960 --> 00:06:01.240
It's all about intentionally
taking advantage

00:06:01.240 --> 00:06:03.820
of the mirroring effect that
Conway's Law describes.

00:06:05.400 --> 00:06:07.860
Now, let's start a brief
history lesson here,

00:06:08.600 --> 00:06:10.280
because this isn't
just a recent idea.

00:06:11.460 --> 00:06:13.780
Research has backed
this up for quite some time.

00:06:14.780 --> 00:06:16.220
Way back in 2012,

00:06:16.840 --> 00:06:20.440
Alan McCormack and his colleagues
highlighted this dynamic, stating:

00:06:21.852 --> 00:06:25.152
“Products tend to ‘mirror’ the
architectures of the organizations...

00:06:25.420 --> 00:06:26.660
...in which they are developed.

00:06:27.260 --> 00:06:31.040
This dynamic occurs because the
organization’s governance structures,

00:06:31.040 --> 00:06:34.100
problem solving routines,
and communication patterns...

00:06:34.600 --> 00:06:37.460
...constrain the space in which
it searches for new solutions.”

00:06:38.160 --> 00:06:40.120
In other words, the way we're set up

00:06:40.120 --> 00:06:43.100
limits the kinds of solutions
we can even think of.

00:06:44.400 --> 00:06:48.580
Therefore, to increase our chances of
building truly effective software systems

00:06:48.660 --> 00:06:51.460
optimized for that
end-to-end flow we desire,

00:06:52.000 --> 00:06:54.840
we can undertake an
“Inverse Conway Maneuver”

00:06:55.840 --> 00:06:58.320
(sometimes called the
Reverse Conway Maneuver).

00:06:59.940 --> 00:07:02.820
The core idea is to
intentionally reconfigure

00:07:02.820 --> 00:07:06.460
the team intercommunications
before the software is finalized.

00:07:07.700 --> 00:07:10.360
The Inverse Conway
Maneuver implies that we should

00:07:10.360 --> 00:07:13.840
actively design our teams to match
the software architecture we need.

00:07:17.060 --> 00:07:19.480
Now, our history
lesson continues.

00:07:20.880 --> 00:07:22.840
While the idea of
influencing architecture

00:07:22.840 --> 00:07:25.480
through organizational
design was gaining traction,

00:07:25.780 --> 00:07:28.600
the specific term "Inverse Conway Maneuver"

00:07:29.320 --> 00:07:32.980
got a significant boost when it appeared
on the Thoughtworks Technology Radar.

00:07:34.680 --> 00:07:37.300
Back in July 2014, in Volume 10,

00:07:38.160 --> 00:07:40.900
Thoughtworks explicitly added
the Inverse Conway Maneuver,

00:07:41.520 --> 00:07:43.040
placing it in the "Trial" ring,

00:07:43.620 --> 00:07:46.720
signaling it as something companies
should consider experimenting with.

00:07:47.920 --> 00:07:51.020
This marked a notable recognition
of the concept within the industry.

00:07:52.080 --> 00:07:55.200
However, the Inverse Conway Maneuver's

00:07:55.200 --> 00:07:57.820
official stay on the
Radar was relatively brief.

00:07:59.040 --> 00:08:03.360
As you can see, it appeared
again in the January 2015 edition,

00:08:04.020 --> 00:08:06.620
still in the "Trial" ring,
with the same description

00:08:06.620 --> 00:08:10.100
emphasizing evolving team structures
to promote desired architecture.

00:08:11.940 --> 00:08:15.100
But after that? It dropped
off the radar editions.

00:08:15.840 --> 00:08:18.380
Thoughtworks explains
they don't have the bandwidth

00:08:18.380 --> 00:08:21.160
to continuously
review older blips.

00:08:21.980 --> 00:08:23.720
So, while impactful,

00:08:24.120 --> 00:08:28.160
its time as an explicitly tracked
item on the influential radar

00:08:28.160 --> 00:08:32.959
was limited to those two appearances
in late 2014 and early 2015.

00:08:36.110 --> 00:08:39.780
So, the Inverse
Conway Maneuver, ICM,

00:08:39.800 --> 00:08:43.240
faded from the official
radar listings after early 2015.

00:08:44.200 --> 00:08:48.480
But! Fast forward to May 2023,

00:08:48.480 --> 00:08:52.740
and look what popped up on the Thoughtworks
Insights blog: a dedicated article titled

00:08:52.740 --> 00:08:56.720
"Inverse-Conway-Maneuver: How to speed
up product development teams successfully."

00:08:58.240 --> 00:08:59.300
Why the revival?

00:09:00.540 --> 00:09:03.000
The blog post argues that
in today's complex world

00:09:03.420 --> 00:09:06.360
with increasing pressure for
speed and customer-centricity,

00:09:06.880 --> 00:09:09.540
consciously designing teams
around product value streams

00:09:09.800 --> 00:09:11.780
(a core application of the ICM)

00:09:11.860 --> 00:09:16.340
is more critical than ever to reduce
dependencies and accelerate delivery.

00:09:17.300 --> 00:09:19.720
It's essentially framing ICM as

00:09:19.720 --> 00:09:22.820
a key enabler for modern
product development effectiveness.

00:09:26.080 --> 00:09:29.960
Our brief history lesson now
brings us closer to the present day,

00:09:30.380 --> 00:09:33.320
where the ideas underpinning
the Inverse Conway Maneuver

00:09:33.320 --> 00:09:37.280
became integrated into
industry-shaping research and frameworks.

00:09:39.360 --> 00:09:42.540
Dr. Nicole Forsgren and her
colleagues discussed its importance

00:09:42.540 --> 00:09:45.940
back in 2018 in their
foundational book, "Accelerate,"

00:09:46.340 --> 00:09:48.220
based on years of
rigorous research

00:09:48.640 --> 00:09:52.140
analyzing what makes high-performing
technology organizations tick.

00:09:54.140 --> 00:09:58.480
They state: “Our research lends
support to what is sometimes called...

00:09:58.480 --> 00:10:02.740
... the “Inverse Conway Maneuver”,
which states that organizations should...

00:10:02.740 --> 00:10:05.000
...evolve their team and
organizational structure...

00:10:05.580 --> 00:10:07.160
...to achieve the
desired architecture.

00:10:08.740 --> 00:10:12.380
The goal is for your architecture
to support the ability of teams...

00:10:12.380 --> 00:10:16.340
...to get their work done — from
design through to deployment —

00:10:17.060 --> 00:10:20.100
without requiring high-bandwidth
communication between teams.”

00:10:23.640 --> 00:10:25.220
This highlights a
critical objective:

00:10:26.000 --> 00:10:28.700
designing both our
architecture and our organization

00:10:29.460 --> 00:10:31.480
so teams can operate
more autonomously,

00:10:32.400 --> 00:10:35.380
reducing the need for constant,
time-consuming communication

00:10:35.380 --> 00:10:37.380
and coordination
across team boundaries.

00:10:40.200 --> 00:10:41.500
And that concludes
our look back!

00:10:42.480 --> 00:10:46.340
This powerful approach,
validated by Accelerate's research,

00:10:46.840 --> 00:10:50.540
truly gained widespread traction and
became more practically understood

00:10:50.540 --> 00:10:54.440
with the release of the “Team
Topologies” book in 2019,

00:10:55.440 --> 00:10:57.600
which builds heavily
on this principle of

00:10:57.620 --> 00:11:01.240
intentionally designing organizations
for better software systems.

00:11:04.250 --> 00:11:07.300
So, how does this Inverse
Conway Maneuver fit

00:11:07.300 --> 00:11:09.060
into the broader picture
we've been painting?

00:11:10.400 --> 00:11:12.480
In our first video, we explored

00:11:12.980 --> 00:11:16.780
'Why Platform Engineering is
the Natural Evolution of DevOps,'

00:11:17.560 --> 00:11:20.560
discussing how it addresses the
cognitive load and flow challenges

00:11:20.960 --> 00:11:23.420
that often emerged
as DevOps matured.

00:11:25.400 --> 00:11:27.560
Now, we'll connect
those ideas directly.

00:11:28.400 --> 00:11:31.160
We'll explore how intentionally
designing our <i>organization</i>

00:11:32.040 --> 00:11:35.220
– applying the Inverse
Conway Maneuver –

00:11:35.220 --> 00:11:37.360
is crucial for unlocking
the full potential

00:11:37.360 --> 00:11:40.680
of both Platform Engineering
and the original goals of DevOps.

00:11:42.420 --> 00:11:44.440
If you haven't watched
that introductory video yet,

00:11:44.900 --> 00:11:46.680
I highly recommend
checking it out first,

00:11:47.320 --> 00:11:49.780
as it lays much of the
groundwork for today's discussion.

00:11:52.910 --> 00:11:55.500
Alright, ready to
dive deeper into

00:11:55.500 --> 00:11:58.220
how different organizational
structures impact our flow?

00:11:59.060 --> 00:12:01.040
Let's look at some common
DevOps team setups.

00:12:04.040 --> 00:12:06.540
To understand how different
organizational structures

00:12:06.540 --> 00:12:08.520
impact flow and architecture,

00:12:09.140 --> 00:12:11.220
it's helpful to look at
established patterns.

00:12:12.300 --> 00:12:13.540
Back in 2013,

00:12:14.220 --> 00:12:17.800
Matthew Skelton published the
original DevOps Topologies patterns,

00:12:18.420 --> 00:12:21.340
which have since become a
standard way for the industry

00:12:21.340 --> 00:12:25.420
to discuss the pros and cons of various
team designs for software delivery.

00:12:26.820 --> 00:12:29.140
You can see here a
range of both anti-types

00:12:29.840 --> 00:12:31.460
– structures likely
to cause problems –

00:12:32.220 --> 00:12:34.480
and types with varying
potential for success.

00:12:36.980 --> 00:12:39.080
The DevOps Topologies collection

00:12:39.080 --> 00:12:42.080
helps organizations analyze
these different patterns

00:12:42.080 --> 00:12:45.060
and improve their software
delivery and operational capabilities.

00:12:46.280 --> 00:12:47.640
As Matthew Skelton stated:

00:12:48.480 --> 00:12:50.380
“By exploring the
strengths and weaknesses...

00:12:50.380 --> 00:12:53.280
...of these team
structures (or ‘topologies’),

00:12:53.840 --> 00:12:56.980
we can identify the team
structure which might work best...

00:12:56.980 --> 00:12:59.800
...for DevOps practices
in our own organisations,

00:13:00.500 --> 00:13:02.080
taking into account
Conway’s Law.”

00:13:04.120 --> 00:13:07.700
So, let's use this framework
and have a look specifically at

00:13:07.700 --> 00:13:10.120
the topologies considered
to have high potential.

00:13:13.100 --> 00:13:16.580
Okay, Looking at the
DevOps Topologies,

00:13:16.620 --> 00:13:19.600
two patterns stand out with
HIGH potential effectiveness.

00:13:21.120 --> 00:13:23.400
Type 1: Dev and
Ops Collaboration.

00:13:25.000 --> 00:13:28.320
Here, Development and Operations
teams work closely together,

00:13:28.940 --> 00:13:30.480
maintaining separate team structures

00:13:31.200 --> 00:13:34.000
but fostering strong
communication and shared goals.

00:13:35.340 --> 00:13:38.520
Type 2: Fully Shared
Ops Responsibilities.

00:13:39.860 --> 00:13:41.460
This model goes a step further,

00:13:41.920 --> 00:13:45.480
embedding operational responsibilities
directly within the development teams.

00:13:46.460 --> 00:13:50.620
It's the classic "you build it, you
own it" approach fully realized.

00:13:53.300 --> 00:13:56.680
Notice the visual representation
for both Type 1 and Type 2.

00:13:57.260 --> 00:14:00.340
The circles representing
Dev and Ops are overlapping.

00:14:01.820 --> 00:14:03.220
This isn't just a coincidence;

00:14:03.540 --> 00:14:07.520
that close integration and
shared space are fundamental to

00:14:07.520 --> 00:14:10.480
why these topologies are
considered highly effective

00:14:10.880 --> 00:14:12.620
in the original DevOps model.

00:14:13.580 --> 00:14:14.880
They represent the ideal of

00:14:14.880 --> 00:14:18.060
breaking down silos and
fostering deep collaboration.

00:14:19.500 --> 00:14:23.840
But... does high potential come
with its own challenges? Let's see.

00:14:27.240 --> 00:14:29.600
“Each service must be
fully owned by a team...

00:14:29.600 --> 00:14:32.940
...with sufficient cognitive
capacity to build and operate it.”

00:14:34.160 --> 00:14:37.040
Remember that sentence from
our DevOps evolution video?

00:14:38.020 --> 00:14:42.740
It embodies the 'you build it,
you own it' DevOps mantra,

00:14:42.740 --> 00:14:45.600
linking true Responsibility
(and Mandate)

00:14:46.140 --> 00:14:49.100
to the necessary Knowledge
and cognitive capacity required.

00:14:50.600 --> 00:14:55.080
Without Responsibility, we saw how
we get the 'broken DevOps' scenario,

00:14:55.700 --> 00:14:58.500
tossing work over the
metaphorical ‘wall of confusion’.

00:14:59.900 --> 00:15:01.920
The collaborative,
high-potential topologies

00:15:02.320 --> 00:15:03.900
like Type 1 and Type 2

00:15:04.300 --> 00:15:05.760
aim to tear down that wall.

00:15:07.040 --> 00:15:09.680
But removing the wall
often shifts the pressure

00:15:10.180 --> 00:15:11.960
onto the Knowledge
aspect of ownership.

00:15:12.920 --> 00:15:15.020
We expect teams
to be cross-functional

00:15:15.420 --> 00:15:17.120
and handle
everything end-to-end,

00:15:17.660 --> 00:15:18.760
but as we discussed,

00:15:18.960 --> 00:15:21.180
the modern Ops landscape
is incredibly complex.

00:15:22.500 --> 00:15:23.880
This creates a new constraint:

00:15:24.720 --> 00:15:28.660
the sheer cognitive load of being
knowledgeable across the entire stack.

00:15:29.740 --> 00:15:31.480
Furthermore, as teams grow,

00:15:31.960 --> 00:15:34.800
communication overhead
explodes exponentially,

00:15:35.220 --> 00:15:39.140
making deep knowledge sharing
and alignment incredibly difficult –

00:15:40.320 --> 00:15:43.900
think Dunbar's number limiting
effective close collaboration.

00:15:44.880 --> 00:15:48.320
Expecting a single team to
master and effectively communicate

00:15:48.320 --> 00:15:52.180
across too broad a domain inherently
strains their cognitive capacity.

00:15:53.720 --> 00:15:54.900
This isn't a new problem.

00:15:56.060 --> 00:15:57.400
Back in 2015,

00:15:58.040 --> 00:16:00.240
Peter Neumark
accurately pointed out:

00:16:01.260 --> 00:16:03.480
“Despite striving to be cross-functional,

00:16:04.040 --> 00:16:07.520
one of the thornier problems
product teams often face...

00:16:07.520 --> 00:16:09.600
...is lacking some
necessary competence."

00:16:13.170 --> 00:16:16.140
So, we arrive at a
crucial realization:

00:16:16.940 --> 00:16:19.400
the very DevOps
topologies identified as

00:16:19.400 --> 00:16:21.860
having the <i>highest
potential</i> for effectiveness

00:16:22.560 --> 00:16:24.040
– those deeply
collaborative models –

00:16:24.040 --> 00:16:28.980
often come hand-in-hand with the <i>highest
cognitive load</i> for the teams involved.

00:16:30.080 --> 00:16:32.640
It's a direct consequence
of expecting teams

00:16:32.640 --> 00:16:36.960
to own and know everything end-to-end
in today's complex environments.

00:16:40.060 --> 00:16:43.060
So, we have this
inherent tension:

00:16:43.780 --> 00:16:47.360
team autonomy, which increases
flow by reducing handoffs,

00:16:48.120 --> 00:16:51.400
often clashes with the lack of
deep, specialized competence

00:16:51.400 --> 00:16:55.780
across the entire required
stack, which decreases flow.

00:16:57.040 --> 00:17:00.120
The reality is, there's
no silver bullet here.

00:17:00.900 --> 00:17:04.560
It forces a trade-off between
end-to-end Responsibility

00:17:04.820 --> 00:17:06.180
(granting teams full autonomy)

00:17:06.680 --> 00:17:09.159
and managing the cognitive
load that comes with

00:17:09.159 --> 00:17:12.380
expecting deep, end-to-end
Knowledge in every domain.

00:17:13.660 --> 00:17:16.799
I recently fell in love with
this phrase from Esther Perel:

00:17:18.259 --> 00:17:21.140
"A paradox to manage,
not a problem to solve."

00:17:21.540 --> 00:17:23.180
And I think it applies
perfectly here.

00:17:24.200 --> 00:17:27.880
There might not be a way to
completely <i>eliminate</i> this tension

00:17:27.920 --> 00:17:30.000
between broad responsibility
and deep knowledge.

00:17:30.720 --> 00:17:33.760
Instead, we need to find
ways to <i>manage</i> the paradox,

00:17:34.120 --> 00:17:35.400
navigate the trade-off,

00:17:35.660 --> 00:17:39.720
and balance the polarity
effectively within our specific context.

00:17:43.220 --> 00:17:46.200
So how do we actively
manage this paradox?

00:17:47.340 --> 00:17:49.440
One useful tool is
Polarity Mapping.

00:17:50.200 --> 00:17:53.840
It helps us visualize and navigate
dilemmas that are ongoing,

00:17:53.880 --> 00:17:58.560
seemingly unsolvable, and contain
opposing, yet interdependent, ideas.

00:18:00.280 --> 00:18:04.160
Let's look at this polarity map
tailored for our DevOps situation.

00:18:05.180 --> 00:18:08.800
On the left pole, we have High
Responsibility (End-to-End) –

00:18:09.500 --> 00:18:12.200
think "you build
it, you own it."

00:18:12.840 --> 00:18:15.520
The upsides are
clear: faster feedback,

00:18:16.180 --> 00:18:19.920
reduced handoffs, increased
ownership, better collaboration,

00:18:20.460 --> 00:18:22.060
and potentially higher velocity.

00:18:23.000 --> 00:18:26.960
But the downsides, the unintended
consequences, are significant:

00:18:27.640 --> 00:18:32.300
cognitive overload, potential
burnout, inconsistent standards,

00:18:32.320 --> 00:18:35.960
difficulty scaling expertise,
and the risk of errors

00:18:35.960 --> 00:18:38.100
due to a lack of deep
knowledge everywhere.

00:18:40.400 --> 00:18:43.700
On the right pole, we have
High Knowledge (Specialized) –

00:18:44.580 --> 00:18:46.340
reminiscent of the
older siloed world.

00:18:47.360 --> 00:18:51.400
The benefits? Deep expertise,
optimized performance,

00:18:52.140 --> 00:18:55.000
standardized practices,
and potentially higher quality.

00:18:56.200 --> 00:18:58.160
But the downsides are equally familiar:

00:18:58.960 --> 00:19:00.960
siloed information,
slower changes,

00:19:01.540 --> 00:19:04.160
bottlenecks around experts,
and reduced adaptability.

00:19:06.420 --> 00:19:09.800
The tension is clear: we
want the upsides of both poles –

00:19:09.880 --> 00:19:13.660
the autonomy <i>and</i> speed
of end-to-end responsibility

00:19:14.120 --> 00:19:16.660
and the quality and depth
of specialized knowledge.

00:19:17.480 --> 00:19:19.460
We want to achieve
our greater purpose,

00:19:19.620 --> 00:19:21.600
shown at the top: Increased Flow.

00:19:22.240 --> 00:19:24.720
And we want to avoid the
downsides of <i>both</i> poles,

00:19:25.140 --> 00:19:28.900
which lead to our fear, at
the bottom: Decreased Flow.

00:19:30.240 --> 00:19:33.220
How does this map help
us find a way forward,

00:19:33.560 --> 00:19:35.880
especially towards
Platform Engineering?

00:19:37.140 --> 00:19:40.020
It starkly highlights the
<i>negative consequences</i> of

00:19:40.080 --> 00:19:42.720
pushing too hard on the
"High Responsibility" pole

00:19:42.820 --> 00:19:46.580
without support –
particularly cognitive overload.

00:19:47.460 --> 00:19:50.200
This visually demonstrates
<i>why</i> many teams get stuck.

00:19:51.140 --> 00:19:55.000
It makes the case for needing
mechanisms to <i>mitigate</i> those downsides.

00:19:56.440 --> 00:19:59.080
This is precisely where
concepts from Team Topologies,

00:19:59.500 --> 00:20:03.200
like a Platform Team providing curated,
self-service capabilities, come in.

00:20:04.660 --> 00:20:08.220
Such a platform aims to
offload specific cognitive burdens

00:20:08.980 --> 00:20:11.740
(like infrastructure
complexity or security tooling),

00:20:12.520 --> 00:20:17.500
allowing stream-aligned teams to retain
high responsibility for their core domain

00:20:17.800 --> 00:20:21.540
while benefiting from specialized
knowledge embedded in the platform.

00:20:22.660 --> 00:20:26.380
It helps us manage the polarity,
keeping us in the upper quadrants.

00:20:27.820 --> 00:20:30.780
<i>Suggestion</i>: This map is
a powerful diagnostic tool.

00:20:32.190 --> 00:20:34.060
To make it even more actionable,

00:20:34.060 --> 00:20:37.360
you could use it in workshops
to add specific "Action Steps"

00:20:38.200 --> 00:20:40.200
(how do we get more
benefits of both poles?)

00:20:40.800 --> 00:20:42.140
and "Early Warnings"

00:20:42.200 --> 00:20:44.440
(what are the signs we're
slipping into the downsides?).

00:20:47.290 --> 00:20:51.220
So, we've identified these highly
collaborative DevOps topologies

00:20:51.600 --> 00:20:52.740
– Type 1 and Type 2 –

00:20:53.340 --> 00:20:55.340
as having the highest
potential effectiveness

00:20:55.340 --> 00:20:57.220
according to the
original patterns.

00:20:58.520 --> 00:21:01.520
They embody the DevOps
ideal of breaking down silos.

00:21:03.040 --> 00:21:05.700
However, as we just discussed,

00:21:05.700 --> 00:21:08.780
this high potential often comes
with a significant downside:

00:21:09.580 --> 00:21:10.660
high cognitive load.

00:21:11.600 --> 00:21:15.080
Teams are expected to know
and manage everything end-to-end.

00:21:16.460 --> 00:21:20.180
And this cognitive load is
precisely why many organizations

00:21:20.280 --> 00:21:22.520
find themselves
"Stuck in the middle,"

00:21:23.100 --> 00:21:25.960
as highlighted in the 2021
State of DevOps Report.

00:21:26.900 --> 00:21:30.160
Teams adopt these collaborative
structures aiming for high performance,

00:21:31.060 --> 00:21:33.480
but the sheer weight of
managing the complexity

00:21:33.820 --> 00:21:37.580
– the tools, the infrastructure,
the security, the operational tasks –

00:21:38.080 --> 00:21:39.780
prevents them from
truly accelerating.

00:21:40.860 --> 00:21:45.320
They hit a plateau because the
cognitive burden slows down value delivery,

00:21:46.220 --> 00:21:50.280
increases the chance of errors, and hinders
their ability to focus on innovation.

00:21:51.420 --> 00:21:53.400
They have the <i>potential</i>
to be high performers,

00:21:54.200 --> 00:21:56.420
but the cognitive
load keeps them stuck.

00:21:57.620 --> 00:22:01.780
Now, it's fair to say other
factors like chronic underfunding,

00:22:02.240 --> 00:22:06.920
technical debt, or shifting priorities
can also contribute to teams getting stuck.

00:22:07.560 --> 00:22:10.600
However, the
intense cognitive load,

00:22:11.020 --> 00:22:15.100
directly linked to the complexity these
high-potential collaborative structures

00:22:15.100 --> 00:22:18.300
must manage, represents
a critical bottleneck

00:22:18.300 --> 00:22:21.940
that organizational
redesign strategies

00:22:22.040 --> 00:22:25.900
like Platform Engineering
specifically aim to alleviate.

00:22:29.340 --> 00:22:31.100
Viewed through the
lens of Conway’s Law,

00:22:31.520 --> 00:22:34.300
the <i>organizational design
itself</i> becomes the constraint

00:22:34.300 --> 00:22:38.440
that causes many DevOps
initiatives to get “stuck in the middle.”

00:22:39.780 --> 00:22:43.380
Pushing for high collaboration without
addressing the resulting cognitive load

00:22:43.880 --> 00:22:45.900
creates a bottleneck
inherent in the structure.

00:22:47.950 --> 00:22:51.800
To break free, we can't just
focus on tools or processes;

00:22:52.160 --> 00:22:55.480
we have to make team-of-teams
design part of our strategic plan.

00:22:56.580 --> 00:22:59.580
We need to actively use the
mirroring effect of Conway’s Law

00:22:59.980 --> 00:23:02.460
to our advantage with an
Inverse Conway Maneuver.

00:23:05.270 --> 00:23:08.960
So, how do we start designing
our organization for better flow?

00:23:10.080 --> 00:23:14.840
Niels Pflaeging, in his book "Organize
for Complexity," offers a key insight:

00:23:15.780 --> 00:23:18.880
“The key to successful knowledge
work is in the interactions...

00:23:18.880 --> 00:23:22.080
...between the informal structure
and the value creating structure.”

00:23:23.340 --> 00:23:27.480
This suggests that our focus
shouldn't just be on formal org charts,

00:23:27.940 --> 00:23:32.140
but on how teams <i>actually</i> interact based
on the real needs of delivering value.

00:23:35.480 --> 00:23:38.200
This aligns perfectly with the
Team Topologies approach,

00:23:38.760 --> 00:23:41.040
which advocates starting
with stream-aligned teams –

00:23:41.740 --> 00:23:45.980
those focused directly on a business
domain or organizational capability.

00:23:47.400 --> 00:23:49.540
Understanding their
value-creating structure

00:23:49.560 --> 00:23:52.920
and their real interaction
needs (the informal structure)

00:23:52.920 --> 00:23:56.200
is the crucial first step of our
Inverse Conway Maneuver.

00:23:57.560 --> 00:23:59.920
But, as our polarity map showed,

00:24:00.300 --> 00:24:04.500
simply aligning teams to value
streams runs into the trade-off

00:24:04.500 --> 00:24:06.240
between the scope
of their Responsibility

00:24:06.240 --> 00:24:09.600
and the cognitive load imposed
by the required Knowledge.

00:24:10.700 --> 00:24:11.840
How do we manage that?

00:24:13.400 --> 00:24:15.660
It's time to extend
our inverse maneuver

00:24:15.660 --> 00:24:18.840
and apply another team
topology – platforms –

00:24:18.840 --> 00:24:21.820
designed specifically
to reduce cognitive load

00:24:21.880 --> 00:24:24.460
through clear boundaries
and well-defined services.

00:24:27.460 --> 00:24:32.860
So, how can we approach these potentially
significant organizational changes,

00:24:32.920 --> 00:24:36.060
like applying the Inverse Conway
Maneuver, in a structured way?

00:24:37.300 --> 00:24:39.400
The Lean Value Tree (LVT),

00:24:39.840 --> 00:24:42.080
which we touched upon
in the Vision to Goal video,

00:24:42.500 --> 00:24:44.100
offers a fantastic framework.

00:24:45.480 --> 00:24:47.640
It helps us visualize
our strategy,

00:24:47.940 --> 00:24:50.320
cascading from a
high-level Goal down

00:24:50.320 --> 00:24:54.300
through testable Hypotheses
(or Bets) to concrete Initiatives.

00:24:55.880 --> 00:25:00.560
Crucially, the LVT allows us to
treat organizational design changes

00:25:00.560 --> 00:25:03.460
<i>not</i> as disruptive Big
Bang reorganizations,

00:25:03.840 --> 00:25:07.380
but as controlled experiments
via testable hypotheses.

00:25:08.520 --> 00:25:09.820
We're essentially saying,

00:25:10.480 --> 00:25:14.880
"We bet that changing our team
structure or introducing a platform team...

00:25:14.880 --> 00:25:17.700
...will lead to this specific,
measurable outcome."

00:25:19.120 --> 00:25:20.620
Let's look at two examples.

00:25:22.320 --> 00:25:24.980
Example 1 (Value
Stream Alignment):

00:25:26.300 --> 00:25:29.800
The Goal here is clear:
<i>Increase time to market speed</i>.

00:25:30.940 --> 00:25:36.040
The Hypothesis or Bet is a classic Inverse
Conway Maneuver focused on value streams:

00:25:36.980 --> 00:25:39.340
<i>If we reshape teams
around value domains,</i>

00:25:39.720 --> 00:25:41.540
<i>we'll reduce dependencies
and lead time.</i>

00:25:42.760 --> 00:25:45.880
The Initiatives – <i>mapping
domains and piloting a cluster team</i> –

00:25:46.380 --> 00:25:48.680
are the first concrete
steps to test this bet.

00:25:49.780 --> 00:25:52.540
We measure success
by tracking <i>lead time</i>,

00:25:52.540 --> 00:25:55.660
<i>waiting time</i>, and the <i>ratio
of self-reliant backlog items</i>.

00:25:56.660 --> 00:25:59.240
This directly relates to
that first step we discussed:

00:25:59.800 --> 00:26:01.980
aligning teams to the
value-creating structure.

00:26:04.300 --> 00:26:06.900
Example 2 (Platform
Team Introduction):

00:26:08.100 --> 00:26:11.560
Here, the Goal is potentially
to <i>Increase product margin</i>.

00:26:12.500 --> 00:26:15.680
The Hypothesis links directly to
the second step of our maneuver –

00:26:16.560 --> 00:26:20.920
offloading cognitive load: <i>If we
establish a self-service platform,</i>

00:26:21.340 --> 00:26:25.960
<i>we'll reduce cognitive load, free up time
for innovation, and thus improve margins.</i>

00:26:26.920 --> 00:26:27.940
The Initiatives involve

00:26:27.940 --> 00:26:31.080
<i>growing the platform team and
onboarding an internal customer.</i>

00:26:32.260 --> 00:26:34.520
Success is measured
through <i>product P&amp;L</i>,

00:26:35.080 --> 00:26:36.860
the <i>number of
successful experiments</i>,

00:26:37.320 --> 00:26:40.420
and the <i>ratio of technical
vs. non-technical tasks</i>

00:26:41.100 --> 00:26:42.320
for the value stream teams.

00:26:43.920 --> 00:26:45.180
Using the LVT,

00:26:45.180 --> 00:26:49.580
we frame organizational engineering
as an experimental, iterative process,

00:26:50.180 --> 00:26:52.200
allowing us to learn
and adapt quickly,

00:26:52.880 --> 00:26:56.080
ensuring our changes are
tied to tangible business goals

00:26:56.080 --> 00:26:58.960
and validated by
measurable outcomes.

00:27:00.400 --> 00:27:03.560
Crucially, while the ultimate
goal is business impact

00:27:04.080 --> 00:27:06.420
(like faster time-to-market
or higher margins),

00:27:07.060 --> 00:27:09.120
we should also define
leading indicators

00:27:09.120 --> 00:27:12.940
to measure the success of
the organizational change itself.

00:27:14.020 --> 00:27:16.400
Are inter-team dependencies
actually decreasing?

00:27:17.400 --> 00:27:19.760
Is cognitive load
perceived to be lower?

00:27:20.860 --> 00:27:24.040
Tracking metrics like
dependency counts, types,

00:27:24.160 --> 00:27:27.560
resolution times, or even
team sentiment surveys

00:27:27.660 --> 00:27:29.660
can give us much faster feedback

00:27:29.660 --> 00:27:33.320
to de-risk the change
and adapt the initiative well

00:27:33.320 --> 00:27:36.780
before the final business
outcome fully materializes.

00:27:39.480 --> 00:27:42.200
So, how do those
structured experiments

00:27:42.200 --> 00:27:43.560
from the Lean Value Tree

00:27:43.560 --> 00:27:46.080
help us tackle common
organizational dysfunctions?

00:27:47.640 --> 00:27:49.380
Let's look at a
typical scenario.

00:27:51.600 --> 00:27:52.220
On the left,

00:27:52.460 --> 00:27:55.940
we see what often happens in
organizations with traditional silos,

00:27:56.560 --> 00:27:59.660
even if they try to put a
modern API or portal on top.

00:27:59.880 --> 00:28:01.760
It looks like self-service,

00:28:02.300 --> 00:28:04.280
like the magical machine
of the Wizard of Oz,

00:28:04.880 --> 00:28:07.920
but behind the curtain,
it's still just manual handoffs

00:28:08.300 --> 00:28:11.980
between different teams –
Wintel, DBAs, Middleware...

00:28:12.960 --> 00:28:15.120
This is "TicketOps" disguised.

00:28:16.120 --> 00:28:19.700
The result? Coupled
backlogs, long lead times,

00:28:20.140 --> 00:28:23.000
and frustrated developers
who don't have true self-service.

00:28:24.000 --> 00:28:25.380
It's an artificial cloud,

00:28:25.400 --> 00:28:27.640
relying on the "man
behind the curtain."

00:28:29.400 --> 00:28:32.140
Now, contrast that with
the image on the right:

00:28:32.700 --> 00:28:33.960
the vending machine.

00:28:34.480 --> 00:28:35.740
This represents the goal –

00:28:36.620 --> 00:28:41.400
genuine self-service
IaaS or PaaS.

00:28:42.480 --> 00:28:45.500
Developers can instantly
get the resources they need,

00:28:45.860 --> 00:28:47.500
predictably and reliably,

00:28:47.980 --> 00:28:50.940
without hidden manual steps
or complex dependencies.

00:28:52.480 --> 00:28:53.760
The Inverse Conway Maneuver,

00:28:53.760 --> 00:28:56.880
guided by hypotheses
tested through the LVT,

00:28:56.880 --> 00:28:58.940
is the engine for
this transformation.

00:29:00.140 --> 00:29:02.340
By intentionally redesigning
team interactions,

00:29:02.840 --> 00:29:05.140
perhaps by creating a
dedicated platform team

00:29:05.140 --> 00:29:09.520
focused on automation and providing
genuine self-service capabilities

00:29:10.420 --> 00:29:12.740
(like the initiatives
in our LVT examples),

00:29:13.240 --> 00:29:16.560
we can dismantle the "man
behind the curtain" setup.

00:29:18.080 --> 00:29:21.600
We replace the slow, opaque,
handover-driven process

00:29:21.600 --> 00:29:24.680
with a fast, transparent,
automated "vending machine,"

00:29:25.440 --> 00:29:28.200
enabling true developer
autonomy and faster flow.

00:29:29.950 --> 00:29:32.320
That transformation from
the hidden complexity of

00:29:32.360 --> 00:29:35.320
the "Wizard of Oz" to the
clear, self-service model

00:29:35.320 --> 00:29:37.040
of the "vending machine"

00:29:37.040 --> 00:29:40.530
relies on establishing clear
boundaries and responsibilities.

00:29:43.720 --> 00:29:48.280
This brings us back to a concept we
touched upon in the DevOps evolution video:

00:29:49.260 --> 00:29:51.160
"Good fences make
good neighbors."

00:29:52.340 --> 00:29:55.040
This phrase, highlighted in
Hannah Foxwell’s presentation

00:29:55.040 --> 00:29:57.560
on shifting left the <i>right</i> way,

00:29:57.560 --> 00:30:00.460
emphasizes the need
for well-defined interfaces

00:30:00.460 --> 00:30:02.760
and ownership
between teams or layers.

00:30:04.040 --> 00:30:07.940
These "fences" are key to managing
cognitive load and enabling flow.

00:30:09.060 --> 00:30:11.020
Before we explore
the fences needed

00:30:11.020 --> 00:30:14.340
to truly escape "the middle"
with high-performing setups,

00:30:14.880 --> 00:30:19.060
let's first look at some common
"medium-potential" topologies

00:30:19.060 --> 00:30:23.200
that represent a significant
step forward from traditional silos,

00:30:23.700 --> 00:30:25.420
often forming the foundation.

00:30:28.580 --> 00:30:31.740
Let's look at how these
"medium-potential" topologies

00:30:31.740 --> 00:30:34.160
build some of those
necessary "fences".

00:30:35.440 --> 00:30:41.000
Here we see Type 3: Ops as
Infrastructure-as-a-Service (IaaS).

00:30:42.040 --> 00:30:45.340
The Ops team essentially
provides the underlying infrastructure

00:30:45.620 --> 00:30:47.520
– compute, storage, networking –

00:30:47.960 --> 00:30:50.620
as a consumable service
to the application teams.

00:30:51.820 --> 00:30:53.920
Think of it as providing
the basic building blocks.

00:30:55.610 --> 00:30:58.240
And Type 8:
Container-Driven Collaboration

00:30:58.240 --> 00:31:01.680
often implies a
Platform-as-a-Service (PaaS) model,

00:31:02.260 --> 00:31:06.120
where the Ops or platform team
provides a container orchestration platform

00:31:06.660 --> 00:31:09.560
(like Kubernetes) and
related tooling as a service.

00:31:10.560 --> 00:31:14.060
Application teams deploy
their containerized applications

00:31:14.200 --> 00:31:15.560
onto this managed platform.

00:31:17.160 --> 00:31:18.160
In both cases,

00:31:18.240 --> 00:31:20.800
the Ops/Platform team
abstracts the complexities

00:31:20.820 --> 00:31:23.880
of the underlying layer
and offers it <i>as a service</i>.

00:31:24.800 --> 00:31:28.380
This aligns perfectly with the
XaaS (Everything-as-a-Service)

00:31:28.380 --> 00:31:31.160
interaction mode described
in Team Topologies.

00:31:32.040 --> 00:31:34.760
The platform provides, the
application team consumes.

00:31:36.420 --> 00:31:38.520
The core goal here
is cognitive offloading.

00:31:39.780 --> 00:31:43.580
The burden of managing raw infrastructure
or the intricacies of Kubernetes

00:31:43.580 --> 00:31:48.460
is shifted away from the application teams
and onto the specialized platform team.

00:31:49.540 --> 00:31:53.400
This frees up the application
developers to focus higher up the stack.

00:31:54.840 --> 00:31:56.180
And this self-service access

00:31:56.180 --> 00:31:59.300
to standardized infrastructure
or platform resources?

00:32:00.220 --> 00:32:01.900
That's our vending
machine in action!

00:32:02.920 --> 00:32:05.360
Developers can get
the compute, storage,

00:32:05.380 --> 00:32:08.000
or container runtime
they need, on-demand,

00:32:08.460 --> 00:32:12.200
without needing to know how the
machine itself is built or maintained.

00:32:15.610 --> 00:32:19.000
Now, having an Ops
or Platform team provide

00:32:19.000 --> 00:32:21.700
infrastructure or
containers as a service

00:32:22.380 --> 00:32:23.520
– like our vending machine –

00:32:24.220 --> 00:32:28.940
is undoubtedly a huge step forward
compared to traditional Dev and Ops silos.

00:32:30.540 --> 00:32:34.640
These Type 3 and Type 8
topologies establish crucial "fences,"

00:32:35.020 --> 00:32:37.600
enable self-service for
foundational resources,

00:32:38.060 --> 00:32:41.280
and definitely help reduce some
cognitive load for application teams.

00:32:42.740 --> 00:32:44.780
However, are they enough

00:32:44.780 --> 00:32:47.860
to truly escape the "Stuck
in the middle" phase?

00:32:48.760 --> 00:32:50.480
Often, the answer is no.

00:32:51.420 --> 00:32:54.560
Why? Because while
these topologies offload

00:32:54.560 --> 00:32:57.360
the burden of managing
the <i>lowest layers</i> of the stack

00:32:57.860 --> 00:33:00.560
(the raw infrastructure
or the container platform),

00:33:01.240 --> 00:33:04.440
they often don't address the
complexity that sits just above it.

00:33:05.820 --> 00:33:09.620
Application teams still need
to figure out CI/CD pipelines,

00:33:10.120 --> 00:33:13.900
testing frameworks, security
scanning, observability setup,

00:33:14.560 --> 00:33:18.600
secret management, database
provisioning, and potentially much more.

00:33:19.900 --> 00:33:22.600
These reusable IaaS
or PaaS building blocks

00:33:23.200 --> 00:33:25.800
don't automatically solve
the operational challenges

00:33:25.800 --> 00:33:28.400
related to the
<i>application lifecycle</i> itself.

00:33:29.560 --> 00:33:33.240
Significant cognitive load
related to gluing services together,

00:33:34.140 --> 00:33:36.360
configuration, and
operational best practices

00:33:36.880 --> 00:33:39.260
remains squarely on the
shoulders of the application teams.

00:33:41.100 --> 00:33:42.800
Therefore, while valuable,

00:33:43.260 --> 00:33:47.700
these medium-potential topologies often
don't provide enough cognitive offloading

00:33:47.700 --> 00:33:50.180
across the full development
and delivery lifecycle

00:33:50.180 --> 00:33:53.980
to propel teams into the
high-performing category.

00:33:55.600 --> 00:33:58.540
The remaining burden
keeps them... well, stuck.

00:34:01.620 --> 00:34:04.860
So, if the "vending machine"
of basic IaaS or PaaS

00:34:04.860 --> 00:34:07.140
isn't enough to fully
unblock our teams,

00:34:07.760 --> 00:34:10.080
what's the next step in our
Inverse Conway Maneuver?

00:34:11.039 --> 00:34:14.680
We need to build another,
higher-level "fence."

00:34:15.979 --> 00:34:20.020
Look at this diagram, again inspired
by Hannah Foxwell's presentation,

00:34:20.580 --> 00:34:23.180
but now showing all
three distinct layers:

00:34:23.719 --> 00:34:26.820
Infrastructure, Platforms,
and Applications.

00:34:27.999 --> 00:34:31.039
This middle Platform layer
is where we can introduce

00:34:31.039 --> 00:34:34.400
a true Internal
Developer Platform (IDP).

00:34:35.960 --> 00:34:37.980
Of course, the
success hinges on this

00:34:38.380 --> 00:34:40.999
being a well-designed
and maintained IDP,

00:34:41.580 --> 00:34:42.820
built with a product mindset

00:34:43.620 --> 00:34:46.320
– something we explored in
the 'Platform-as-a-Product' video.

00:34:47.399 --> 00:34:50.219
A bad platform can
indeed hinder flow.

00:34:52.439 --> 00:34:56.619
An IDP, built and maintained by a
dedicated Platform Engineering team,

00:34:57.100 --> 00:35:00.120
goes beyond just providing
infrastructure building blocks.

00:35:01.360 --> 00:35:04.780
It offers curated, self-service
workflows and tools

00:35:05.100 --> 00:35:06.100
– the Golden Paths –

00:35:06.700 --> 00:35:11.240
that guide developers through
common tasks across the entire SDLC.

00:35:12.400 --> 00:35:15.700
Think CI/CD, testing,
deployment strategies,

00:35:15.980 --> 00:35:18.220
observability, security scanning

00:35:19.120 --> 00:35:23.280
– all packaged and presented in a
consistent, easy-to-consume way.

00:35:24.780 --> 00:35:26.820
If we want to stick
with our Oz metaphors,

00:35:27.280 --> 00:35:29.460
while the infrastructure
layer might provide

00:35:29.460 --> 00:35:32.080
the basic "vending
machine" for resources,

00:35:32.680 --> 00:35:35.200
the IDP layer paves
the smooth, well-lit

00:35:35.820 --> 00:35:38.120
"Yellow Brick Road"
for developers to follow,

00:35:38.720 --> 00:35:40.700
drastically reducing
their cognitive load

00:35:41.180 --> 00:35:43.940
and enabling them to focus
on delivering application value.

00:35:45.280 --> 00:35:47.700
This is how we truly
empower stream-aligned teams

00:35:48.100 --> 00:35:50.620
and help them escape the
"stuck in the middle" plateau.

00:35:52.160 --> 00:35:55.000
Now, a quick but
important clarification:

00:35:56.360 --> 00:35:58.980
the term "platform"
can be a bit overloaded.

00:36:00.020 --> 00:36:02.000
We've seen "Platform"
as a <i>team topology</i>

00:36:02.760 --> 00:36:04.940
(like Type 3 Ops providing IaaS)

00:36:05.300 --> 00:36:07.400
often operating at
the infrastructure layer.

00:36:08.280 --> 00:36:11.060
Here, we're also talking
about the <i>technical layer</i> itself

00:36:11.870 --> 00:36:13.320
– in this case the IDP –

00:36:13.660 --> 00:36:15.840
built by a dedicated
Platform Engineering team,

00:36:16.480 --> 00:36:18.200
which sits above
the infrastructure.

00:36:19.520 --> 00:36:23.680
It's crucial to distinguish between these
concepts when designing our organization.

00:36:26.520 --> 00:36:28.700
So, we have these
distinct layers:

00:36:29.320 --> 00:36:33.160
Infrastructure, Platforms
(IDP), and Applications.

00:36:34.240 --> 00:36:37.260
A key principle, building
on the "good fences" idea,

00:36:37.480 --> 00:36:42.900
is applying the "you build it, you own
it" DevOps mindset <i>within each layer</i>.

00:36:44.680 --> 00:36:48.920
The Infrastructure team owns
the IaaS/PaaS services they provide

00:36:48.920 --> 00:36:53.680
via a well-defined XaaS
(Everything-as-a-Service) interaction mode.

00:36:54.560 --> 00:36:57.740
The Platform team owns
the IDP and its Golden Paths,

00:36:57.920 --> 00:37:00.520
offered via another
clear XaaS interface.

00:37:01.400 --> 00:37:05.040
And the Application teams own
their applications, built on the platform.

00:37:06.220 --> 00:37:10.300
Each layer operates with autonomy
and responsibility for its domain.

00:37:11.600 --> 00:37:14.000
Applying the Inverse
Conway Maneuver effectively

00:37:14.000 --> 00:37:17.600
often involves intentionally
designing these interactions

00:37:17.640 --> 00:37:20.900
to minimize costly,
high-bandwidth <i>Collaboration</i>

00:37:20.900 --> 00:37:26.040
and instead favour efficient XaaS
or targeted <i>Facilitation</i> modes,

00:37:26.480 --> 00:37:29.400
depending on the context
and maturity of the services.

00:37:32.000 --> 00:37:33.080
How do we get there?

00:37:34.180 --> 00:37:36.100
Implementing a full-fledged IDP

00:37:36.100 --> 00:37:38.880
on top of a robust
IaaS/PaaS layer

00:37:39.120 --> 00:37:40.840
can be a significant
undertaking.

00:37:41.600 --> 00:37:44.100
Therefore, a phased
approach often makes sense,

00:37:44.640 --> 00:37:46.780
especially when applying
the Inverse Conway Maneuver.

00:37:48.260 --> 00:37:51.980
Phase 1: Establish the
Foundation (IaaS/PaaS).

00:37:53.000 --> 00:37:56.280
Focus first on building the
reliable "vending machine"

00:37:56.980 --> 00:37:58.740
– automating
infrastructure provisioning

00:37:58.740 --> 00:38:03.680
and offering basic IaaS or
container platform (PaaS) capabilities

00:38:03.680 --> 00:38:08.120
as self-service (like DevOps
Topologies Type 3 or 8).

00:38:09.000 --> 00:38:11.220
This involves creating
a capable infrastructure

00:38:11.280 --> 00:38:13.740
or platform team
focused on this layer.

00:38:16.580 --> 00:38:18.400
Phase 2: Build the IDP.

00:38:19.580 --> 00:38:22.700
Once the foundation is solid,
build the IDP layer on top,

00:38:23.320 --> 00:38:25.880
creating the "Yellow Brick
Road" with Golden Paths,

00:38:26.040 --> 00:38:31.540
CI/CD, observability, etc., managed by
a dedicated Platform Engineering team

00:38:32.320 --> 00:38:36.620
(potentially evolving from or collaborating
with the initial infrastructure team).

00:38:37.980 --> 00:38:39.940
What are the trade-offs
of this phased approach?

00:38:41.280 --> 00:38:45.540
Pros: It breaks down a massive
change into more manageable steps,

00:38:45.920 --> 00:38:49.040
reducing risk and the initial
cognitive load for the platform builders.

00:38:49.880 --> 00:38:52.100
It allows the organization
to learn and iterate.

00:38:53.180 --> 00:38:55.040
It delivers <i>incremental</i>
value sooner,

00:38:55.480 --> 00:38:59.640
as even basic IaaS/PaaS
self-service is often a big improvement.

00:39:01.020 --> 00:39:05.660
Cons: It takes longer to realize the
full benefits of a comprehensive IDP.

00:39:06.500 --> 00:39:09.520
Application teams might
remain "stuck" for longer,

00:39:10.080 --> 00:39:13.340
dealing with complexities
above the IaaS/PaaS layer.

00:39:14.640 --> 00:39:18.040
There's also a risk that the
organization stops at Phase 1,

00:39:18.800 --> 00:39:20.920
deeming the "vending
machine" "good enough,"

00:39:21.600 --> 00:39:24.560
never reaching the full potential
of the "Yellow Brick Road."

00:39:25.960 --> 00:39:29.820
Remember our discussion in the "From
Product Vision to Product Goal" video,

00:39:30.440 --> 00:39:32.460
particularly regarding
on-premise environments?

00:39:33.760 --> 00:39:36.640
We highlighted the critical
need to "fix the infra first."

00:39:37.740 --> 00:39:42.080
Often, especially on-prem, that
reliable, automatable IaaS layer

00:39:42.120 --> 00:39:44.780
– the vending machine –
simply doesn't exist.

00:39:45.580 --> 00:39:46.680
In such cases,

00:39:46.920 --> 00:39:49.340
building that foundation
must be the priority

00:39:49.380 --> 00:39:53.080
before attempting to build a
sophisticated IDP on shaky ground.

00:39:54.320 --> 00:39:57.840
Trying to build the Yellow Brick
Road without solid ground underneath

00:39:57.840 --> 00:39:59.840
leads to frustration
and failure.

00:40:01.200 --> 00:40:03.280
This all requires investment,

00:40:03.280 --> 00:40:07.840
but the aim is to consolidate efforts
currently fragmented across many teams,

00:40:08.380 --> 00:40:09.660
reducing overall waste.

00:40:10.740 --> 00:40:13.880
Success also depends
on well-managed interfaces

00:40:14.540 --> 00:40:17.100
– those 'good fences' –
between the layers.

00:40:20.640 --> 00:40:24.040
This journey – from recognizing
the impact of Conway's Law,

00:40:24.040 --> 00:40:26.700
to managing the
Responsibility-Knowledge paradox,

00:40:27.200 --> 00:40:30.760
to intentionally designing our
layers and team interactions

00:40:30.760 --> 00:40:32.780
using the Inverse
Conway Maneuver –

00:40:33.780 --> 00:40:36.120
brings us to a
fundamental insight

00:40:36.120 --> 00:40:38.780
about leadership in
modern tech organizations.

00:40:40.120 --> 00:40:42.120
Ray Dalio captures it perfectly:

00:40:43.220 --> 00:40:45.460
“Understand that
a great manager...

00:40:45.460 --> 00:40:47.720
...is essentially an
organizational engineer.”

00:40:48.800 --> 00:40:50.480
This is the key message.

00:40:51.160 --> 00:40:53.600
We've seen how team
structures, boundaries,

00:40:53.600 --> 00:40:57.380
and communication pathways
directly constrain or enable

00:40:57.380 --> 00:41:01.420
our technical architecture and
our ability to deliver value quickly.

00:41:02.580 --> 00:41:04.920
This deep
interdependence highlights

00:41:05.460 --> 00:41:08.340
that we are always working
within socio-technical systems –

00:41:08.880 --> 00:41:12.860
where the social aspects
(teams, culture, communication)

00:41:13.400 --> 00:41:16.000
and technical aspects (architecture, tools)

00:41:16.500 --> 00:41:19.420
are inseparable and must
be designed holistically.

00:41:20.410 --> 00:41:22.980
Therefore, shaping
the organization

00:41:23.580 --> 00:41:24.940
– designing the team-of-teams –

00:41:25.520 --> 00:41:27.100
isn't just an HR function;

00:41:27.940 --> 00:41:29.700
it's a critical
engineering discipline,

00:41:30.320 --> 00:41:32.260
a form of
socio-technical design,

00:41:32.460 --> 00:41:34.780
with profound
technical consequences.

00:41:37.320 --> 00:41:40.320
So, if applying Team
Topologies principles

00:41:40.320 --> 00:41:41.980
and the Inverse Conway Maneuver

00:41:41.980 --> 00:41:44.420
seems like the logical
way to break free from

00:41:44.420 --> 00:41:47.160
being "stuck in the middle"
and achieve fast flow...

00:41:48.200 --> 00:41:51.840
then why is it often so hard for
organizations to get started?

00:41:53.300 --> 00:41:54.720
From a manager's perspective,

00:41:55.080 --> 00:41:59.200
restructuring teams is inherently
complex and often perceived as risky.

00:42:00.260 --> 00:42:03.880
It disrupts established
routines, reporting lines, budgets,

00:42:04.260 --> 00:42:08.640
and sometimes even challenges
existing power structures or "fiefdoms".

00:42:09.880 --> 00:42:13.040
It requires not only understanding
organizational dynamics

00:42:13.840 --> 00:42:15.780
but also grasping
the deep connection

00:42:15.780 --> 00:42:18.960
to technical architecture
dictated by Conway's Law.

00:42:20.340 --> 00:42:24.560
Getting buy-in across different parts
of the organization can be difficult,

00:42:24.920 --> 00:42:26.680
significant investment
might be needed,

00:42:27.260 --> 00:42:29.840
and the immediate return
isn't always easy to measure.

00:42:31.000 --> 00:42:34.400
Furthermore, managers
might lack the explicit mandate

00:42:34.400 --> 00:42:39.940
or feel hesitant due to past experiences
with painful, ineffective reorganizations.

00:42:41.180 --> 00:42:44.400
This iterative,
hypothesis-driven approach,

00:42:45.160 --> 00:42:47.580
focusing on clear boundaries
and interaction mode

00:42:47.780 --> 00:42:49.340
like those in Team Topologies,

00:42:49.660 --> 00:42:54.180
contrasts sharply with the often
disruptive, top-down 're-orgs' of the past.

00:42:55.180 --> 00:42:58.120
However, successfully
applying this iterative maneuver

00:42:58.120 --> 00:43:01.760
depends heavily on supportive
conditions like psychological safety

00:43:02.580 --> 00:43:05.740
(allowing teams to experiment
and learn without fear of blame),

00:43:06.800 --> 00:43:10.580
strong leadership commitment that champions
the change beyond just line management,

00:43:11.460 --> 00:43:12.960
building trust across teams,

00:43:13.240 --> 00:43:16.840
and embracing organizational
design as an ongoing, adaptive process.

00:43:18.040 --> 00:43:20.100
While these cultural
elements are crucial,

00:43:20.580 --> 00:43:22.300
the relationship
works both ways:

00:43:23.360 --> 00:43:26.520
intentionally designing team
structures and interactions

00:43:26.620 --> 00:43:28.320
for clarity and
reduced friction,

00:43:28.820 --> 00:43:30.500
as advocated by Team Topologies,

00:43:30.840 --> 00:43:35.480
can itself help foster trust and a
more collaborative culture over time,

00:43:36.060 --> 00:43:38.860
provided leadership actively
champions the evolution.

00:43:41.780 --> 00:43:43.120
It's important to note, however,

00:43:43.460 --> 00:43:46.700
that while traditional managers
often hold the formal authority

00:43:46.720 --> 00:43:48.340
for organizational change,

00:43:48.560 --> 00:43:50.400
the work of
organizational engineering

00:43:50.400 --> 00:43:52.880
doesn't have to fall
solely on their shoulders.

00:43:53.940 --> 00:43:56.160
This analysis,
design, and facilitation

00:43:56.160 --> 00:43:58.320
can also be driven
by specialized groups,

00:43:58.980 --> 00:44:01.660
perhaps akin to
an "Enabling Team"

00:44:02.020 --> 00:44:03.600
as described in Team Topologies,

00:44:04.220 --> 00:44:06.200
who are tasked with
guiding and supporting

00:44:06.200 --> 00:44:09.340
the organization's evolution
towards more effective structures.

00:44:12.460 --> 00:44:13.480
One more thing…

00:44:15.360 --> 00:44:18.360
We've spent this whole time
talking about Conway's Law

00:44:18.360 --> 00:44:21.260
and how crucial the
Inverse Conway Maneuver is

00:44:21.260 --> 00:44:24.240
for designing effective
organizations and enabling flow.

00:44:25.460 --> 00:44:28.900
But... what if the very
foundation we've been discussing

00:44:28.920 --> 00:44:32.180
isn't always the most useful
starting point for the conversation?

00:44:35.600 --> 00:44:37.960
We've established the power
of the Inverse Conway Maneuver

00:44:37.960 --> 00:44:40.300
as a tool for
organizational engineering.

00:44:41.120 --> 00:44:45.340
But, is explicitly talking about
Conway's Law <i>always</i> necessary?

00:44:46.720 --> 00:44:50.340
Recently, Matthew Skelton,
co-author of Team Topologies,

00:44:50.740 --> 00:44:54.820
reflected on LinkedIn that he hasn't
really needed to explain Conway's Law

00:44:54.820 --> 00:44:58.780
for the past couple of years when
discussing the value of Team Topologies,

00:44:59.320 --> 00:45:00.920
especially with
senior executives.

00:45:01.580 --> 00:45:04.580
He argues that the core
Team Topologies principles –

00:45:05.180 --> 00:45:07.300
like focusing on
flow without handoffs,

00:45:07.880 --> 00:45:09.240
staying close to the customer,

00:45:09.540 --> 00:45:11.900
and using cognitive load
as a design principle –

00:45:12.480 --> 00:45:16.080
are often more direct and compelling
arguments for change on their own.

00:45:18.680 --> 00:45:22.320
Interestingly, just a
few years prior, in 2022,

00:45:22.800 --> 00:45:27.140
his co-author Manuel Pais
gave a presentation titled

00:45:27.140 --> 00:45:29.640
"Conway’s Law Is
Out to Get You!" –

00:45:30.400 --> 00:45:32.820
highlighting how central it
was to the conversation then.

00:45:34.260 --> 00:45:37.160
So, the emphasis
seems to be shifting.

00:45:38.540 --> 00:45:40.880
As I suggested in my
reply to Matthew's post,

00:45:41.280 --> 00:45:44.760
perhaps Conway's Law is becoming
less of a foundational requirement

00:45:44.760 --> 00:45:47.220
and more of a useful
storytelling tool.

00:45:49.040 --> 00:45:50.600
What are the pros and cons here?

00:45:52.140 --> 00:45:54.320
Pro (talking flow directly):

00:45:55.680 --> 00:45:58.620
Focusing purely on principles
like eliminating handoffs,

00:45:59.200 --> 00:46:00.440
reducing cognitive load,

00:46:00.840 --> 00:46:03.840
and improving flow might
be more direct, practical,

00:46:04.360 --> 00:46:05.860
and relatable for
certain audiences.

00:46:07.240 --> 00:46:11.440
It avoids potentially academic
discussions about a decades-old "law".

00:46:12.680 --> 00:46:14.880
Con (losing the narrative):

00:46:16.180 --> 00:46:20.460
However, ignoring Conway's Law
means losing a powerful explanation

00:46:21.020 --> 00:46:25.620
for <i>why</i> existing siloed structures
often lead to tangled, inefficient systems.

00:46:26.900 --> 00:46:31.040
For teams suffering from the
effects of accidental Conway mirroring

00:46:31.480 --> 00:46:33.140
(like TicketOps
behind a facade),

00:46:34.080 --> 00:46:37.500
invoking the law can
be an "aha!" moment,

00:46:38.020 --> 00:46:40.560
clearly framing the problem
and justifying the need

00:46:40.560 --> 00:46:43.300
for intentional redesign
based on Team Topologies.

00:46:44.380 --> 00:46:47.400
Ultimately, the goal is
designing for fast flow.

00:46:48.780 --> 00:46:50.700
Whether you explicitly
use Conway's Law

00:46:50.700 --> 00:46:53.300
to make your case might
depend on your audience

00:46:53.740 --> 00:46:55.580
and the specific pain
points you're addressing.

00:46:56.760 --> 00:46:59.160
The underlying principles
of reducing handoffs

00:46:59.160 --> 00:47:01.940
and managing cognitive
load remain paramount.

00:47:05.720 --> 00:47:09.960
So, if talking directly about
Conway's Law isn't always necessary,

00:47:10.380 --> 00:47:13.680
how can we pragmatically start the
conversation about improving flow?

00:47:14.980 --> 00:47:19.080
One extremely effective way is by
focusing directly on team dependencies.

00:47:20.700 --> 00:47:24.500
Look at this simple but powerful
tool suggested by Team Topologies:

00:47:24.520 --> 00:47:26.220
Team Dependencies Tracking.

00:47:27.140 --> 00:47:29.720
It involves systematically
identifying and documenting:

00:47:30.840 --> 00:47:32.520
- Which team depends
on which other team?

00:47:33.820 --> 00:47:35.420
- What is the nature
of that dependency?

00:47:36.300 --> 00:47:37.820
- Is it <i>blocking</i>
progress entirely?

00:47:38.360 --> 00:47:39.900
- Is it just <i>slowing</i>
things down?

00:47:41.280 --> 00:47:44.640
- Or is it a healthy, well-managed
dependency (marked as <i>ok</i>)?

00:47:45.520 --> 00:47:48.360
- Does the dependency
cross different value streams?

00:47:49.860 --> 00:47:51.460
- And what exactly
is the dependency?

00:47:52.420 --> 00:47:54.580
is it waiting for an
artifact, an approval,

00:47:55.020 --> 00:47:57.420
some specific knowledge,
or something else?

00:47:58.820 --> 00:48:00.680
This approach is
incredibly pragmatic.

00:48:01.320 --> 00:48:03.560
Instead of starting
with theoretical laws

00:48:03.760 --> 00:48:05.460
or abstract
organizational models,

00:48:06.120 --> 00:48:09.480
you focus on the concrete,
day-to-day friction points

00:48:10.080 --> 00:48:11.720
that are actually
hindering your teams.

00:48:12.780 --> 00:48:13.860
Where are the bottlenecks?

00:48:14.680 --> 00:48:16.700
Where are the
handoffs causing delays?

00:48:18.280 --> 00:48:19.620
By mapping these dependencies,

00:48:20.200 --> 00:48:24.200
you create a clear, data-driven
picture of where flow is being impeded.

00:48:25.140 --> 00:48:26.800
It provides tangible evidence

00:48:27.160 --> 00:48:30.660
and shifts the conversation
towards specific, actionable problems.

00:48:31.960 --> 00:48:35.400
Furthermore, this tracking
provides exactly the kind of data

00:48:35.700 --> 00:48:38.400
you need for those leading
indicators we discussed earlier

00:48:39.040 --> 00:48:42.520
when framing organizational
changes as testable hypotheses –

00:48:43.600 --> 00:48:45.720
it gives you concrete
evidence of whether

00:48:45.820 --> 00:48:48.460
your interventions are
actually reducing friction.

00:48:49.460 --> 00:48:50.460
And notice,

00:48:50.880 --> 00:48:53.080
we haven't needed to
mention Conway's Law at all!

00:48:54.080 --> 00:48:56.120
We're simply
identifying and analyzing

00:48:56.320 --> 00:48:58.400
the <i>real</i> obstacles to
getting work done efficiently.

00:49:01.520 --> 00:49:03.720
Once we've mapped
out those dependencies

00:49:03.720 --> 00:49:06.480
using the tracking method
from the previous slide,

00:49:07.560 --> 00:49:09.840
what do we do with
that information?

00:49:10.720 --> 00:49:12.700
Team Topologies
provides clear guidance:

00:49:13.880 --> 00:49:15.440
Eliminate blocking dependencies.

00:49:16.240 --> 00:49:17.800
Mitigate slow dependencies.

00:49:18.720 --> 00:49:19.940
Keep healthy dependencies.

00:49:21.520 --> 00:49:23.920
This is a direct,
action-oriented approach

00:49:24.320 --> 00:49:26.660
focused squarely
on improving flow.

00:49:28.100 --> 00:49:30.340
By systematically
identifying and then

00:49:30.340 --> 00:49:33.680
actively working to
remove or reduce the friction

00:49:33.680 --> 00:49:35.320
caused by these
inter-team dependencies,

00:49:35.720 --> 00:49:37.560
you are directly
tackling the bottlenecks.

00:49:38.460 --> 00:49:40.940
You're clearing the path for
work to move more smoothly.

00:49:42.060 --> 00:49:44.020
This focus on minimizing
handoffs and delays

00:49:44.440 --> 00:49:46.540
achieves the
goal of faster flow,

00:49:47.300 --> 00:49:50.540
fulfilling a core principle
of Team Topologies – and,

00:49:50.540 --> 00:49:52.040
as Matthew Skelton suggested,

00:49:52.480 --> 00:49:56.100
you can achieve this outcome
without explicitly invoking Conway's Law.

00:49:57.020 --> 00:49:59.200
The practical actions
speak for themselves.

00:50:01.640 --> 00:50:05.800
However, understanding why those
blocking or slowing dependencies

00:50:05.820 --> 00:50:08.300
exist in the first
place can be crucial

00:50:08.340 --> 00:50:10.400
for advocating for more
fundamental change.

00:50:11.420 --> 00:50:14.240
Often, the root cause
isn't just a missing tool

00:50:14.500 --> 00:50:16.020
or a poorly defined process;

00:50:16.580 --> 00:50:20.880
it's the organizational
structure itself – the legacy silos.

00:50:22.820 --> 00:50:26.880
This is where referencing Conway's
Law can still be incredibly useful.

00:50:27.880 --> 00:50:29.680
Think back to our Wizard of Oz metaphor.

00:50:30.740 --> 00:50:33.140
Those blocking or slowing
dependencies are often

00:50:33.140 --> 00:50:35.800
the clumsy actions of the
"man behind the curtain" –

00:50:36.920 --> 00:50:38.840
the manual handoffs,
the ticket queues,

00:50:39.380 --> 00:50:43.140
the coordination meetings necessitated
by a fragmented team structure.

00:50:45.160 --> 00:50:50.020
Conway's Law helps explain <i>why</i> that
"man behind the curtain" structure exists

00:50:50.520 --> 00:50:54.760
and why it inevitably creates
these kinds of inefficient interactions,

00:50:55.800 --> 00:50:58.980
mirroring the organizational
silos in the system's workflow.

00:51:01.240 --> 00:51:03.000
So, while you can improve flow

00:51:03.420 --> 00:51:05.680
by simply tackling the
dependencies you find,

00:51:06.400 --> 00:51:09.340
using Conway's Law
as a narrative tool

00:51:09.660 --> 00:51:11.980
helps make the case for a
more sustainable solution:

00:51:13.080 --> 00:51:14.660
applying the Inverse
Conway Maneuver.

00:51:15.700 --> 00:51:19.560
It explains why restructuring
towards well-defined team types

00:51:19.560 --> 00:51:22.480
and interaction modes, like
those in Team Topologies,

00:51:23.040 --> 00:51:26.860
is necessary to <i>permanently</i>
eliminate those blocking dependencies,

00:51:27.280 --> 00:51:29.340
rather than just patching
over the symptoms.

00:51:30.240 --> 00:51:33.520
It provides the 'why' behind
redesigning the organization

00:51:34.000 --> 00:51:36.080
to build the fast-flowing
system you need,

00:51:36.660 --> 00:51:38.940
ultimately reducing
the hidden costs

00:51:38.960 --> 00:51:41.680
of friction and delay
inherent in the old structure.

00:51:44.780 --> 00:51:47.480
And that brings us to the
end of our bonus exploration

00:51:47.780 --> 00:51:49.700
into the Inverse
Conway Maneuver!

00:51:51.100 --> 00:51:52.460
We started with Conway's Law,

00:51:52.860 --> 00:51:55.400
understanding how our team
communication structures

00:51:55.420 --> 00:51:57.760
inevitably shape our
system architectures.

00:51:58.940 --> 00:52:02.220
We saw how fighting this law
leads to friction and obstacles,

00:52:02.640 --> 00:52:04.640
often keeping teams
"stuck in the middle."

00:52:06.320 --> 00:52:08.480
Then, we flipped the script,

00:52:09.000 --> 00:52:10.700
exploring the Inverse
Conway Maneuver –

00:52:11.400 --> 00:52:13.640
intentionally designing
our organization

00:52:13.700 --> 00:52:16.320
to <i>enable</i> the architecture
and fast flow we desire.

00:52:17.440 --> 00:52:21.100
We looked at managing the
Responsibility-Knowledge paradox,

00:52:21.700 --> 00:52:24.420
the role of different
layers like IaaS, PaaS,

00:52:24.440 --> 00:52:26.500
and IDPs in offloading
cognitive load,

00:52:26.980 --> 00:52:28.980
and how frameworks
like Lean Value Trees

00:52:29.020 --> 00:52:32.580
can guide organizational
engineering as a testable hypothesis.

00:52:33.660 --> 00:52:37.040
We even questioned whether
explicitly mentioning Conway's Law

00:52:37.520 --> 00:52:42.680
is always necessary, highlighting pragmatic
approaches like dependency tracking.

00:52:44.780 --> 00:52:45.980
The core takeaway?

00:52:46.580 --> 00:52:48.140
As Martin Fowler emphasized,

00:52:48.560 --> 00:52:50.960
“The key thing to remember
about Conway's Law...

00:52:51.380 --> 00:52:53.640
...is that the modular
decomposition of a system...

00:52:53.940 --> 00:52:58.420
and the decomposition of the development
organization must be done together.”

00:52:59.640 --> 00:53:02.340
Designing our teams <i>is</i>
designing our systems.

00:53:03.800 --> 00:53:06.860
Great managers (or
dedicated enabling teams)

00:53:07.120 --> 00:53:11.120
act as organizational engineers,
shaping the team-of-teams structure

00:53:11.580 --> 00:53:13.900
to unlock fast flow and
developer productivity.

00:53:14.980 --> 00:53:17.620
Whether you're battling
the "man behind the curtain"

00:53:18.000 --> 00:53:21.480
or building a reliable "vending machine"
and paving the "Yellow Brick Road,"

00:53:22.120 --> 00:53:23.980
intentional
organizational design –

00:53:24.640 --> 00:53:28.900
managed iteratively and focused
on reducing friction – is paramount.

00:53:30.920 --> 00:53:32.540
Thank you so
much for joining me!

00:53:33.040 --> 00:53:36.780
I hope this dive into organizational
design for fast flow was insightful.

00:53:38.080 --> 00:53:40.220
What are your experiences
with Conway's Law

00:53:40.540 --> 00:53:42.400
or applying the Inverse
Conway Maneuver?

00:53:43.040 --> 00:53:44.500
Let me know in the
comments below!

00:53:45.880 --> 00:53:47.860
Don't forget to check
out the other videos

00:53:48.340 --> 00:53:50.980
in the Platform Engineering
series if you haven't already.

00:53:51.740 --> 00:53:52.860
See you next time!

00:53:55.700 --> 00:53:57.500
Thank you for sticking
around to the end.

00:53:58.500 --> 00:54:02.860
The remainder of this video contains
an overview of all resources used.

00:54:03.540 --> 00:54:05.140
There's some
great stuff out there,

00:54:05.200 --> 00:54:07.380
often with references
to even more great stuff.

00:54:08.320 --> 00:54:09.980
Are you ready to go
down this rabbit hole?