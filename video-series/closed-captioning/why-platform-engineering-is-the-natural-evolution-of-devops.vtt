WEBVTT

00:00:00.000 --> 00:00:05.500
Hi there! I'm Tom Peperkamp, a Platform Product Owner.

00:00:05.500 --> 00:00:09.840
That's right—platforms should be treated as products!

00:00:09.840 --> 00:00:13.920
Platform Engineering is a new and rapidly evolving field.

00:00:13.920 --> 00:00:17.620
To help you navigate this space, I've created a video series

00:00:17.620 --> 00:00:21.800
that dives into the why, what, and how of Platform Engineering.

00:00:21.800 --> 00:00:27.140
This series pulls together insights from top-quality public resources, organizing them

00:00:27.140 --> 00:00:32.159
into focused topics to create a 'crash course' in Platform Engineering.

00:00:32.159 --> 00:00:37.879
Each video is curated to support your Platform Engineering journey, offering practical knowledge

00:00:37.879 --> 00:00:43.280
and insights to deepen your understanding of its principles and potential.

00:00:43.280 --> 00:00:44.900
Let's get started!

00:00:47.500 --> 00:00:51.760
Throughout my talk, I'll be referencing content from leading voices in our industry.

00:00:51.760 --> 00:00:56.920
A big shoutout to these rockstars for their amazing blogs and conference talks!

00:00:56.920 --> 00:01:01.220
You'll find all the sources listed at the end of the video.

00:01:01.220 --> 00:01:03.380
These references aren't just for ethics—

00:01:03.880 --> 00:01:07.960
they're packed with valuable insights that I highly recommend exploring.

00:01:08.260 --> 00:01:14.920
So, if you enjoy this video, definitely check them out and dive deeper!

00:01:16.120 --> 00:01:20.539
What if I told you that the very tools designed to simplify our work

00:01:20.539 --> 00:01:23.820
are actually making it more complex?

00:01:23.820 --> 00:01:26.220
Welcome to the paradox of modern Ops.

00:01:26.220 --> 00:01:33.380
Today, we're going to explore 'Why Platform Engineering is the Natural Evolution of DevOps.'

00:01:33.380 --> 00:01:37.020
Now, I know what you're thinking—

00:01:37.020 --> 00:01:39.140
Evolution of DevOps…

00:01:39.140 --> 00:01:41.560
'Is this going to be a history lesson?'

00:01:41.560 --> 00:01:43.380
Well, sort of!

00:01:43.380 --> 00:01:46.800
But don't worry, I'll keep it interesting.

00:01:46.800 --> 00:01:53.220
Think of it as a fun trip down DevOps memory lane, with some eye-openers along the way.

00:01:53.220 --> 00:01:56.380
Evolution is something I associate with slowness.

00:01:56.380 --> 00:01:58.380
Really slow progress.

00:01:58.380 --> 00:02:03.380
So… ‘Hi Platform Engineering, what took you so long?!'

00:02:03.380 --> 00:02:05.380
'And why is TicketOps still a thing?!’

00:02:05.380 --> 00:02:10.380
I recently watched the opening keynote of KubeCon 2017 again.

00:02:10.380 --> 00:02:13.540
What a speaker Kelsey Hightower is!

00:02:13.540 --> 00:02:19.540
‘If you're doing it right, no one should probably even know that you're using Kubernetes.’

00:02:19.540 --> 00:02:23.540
‘Do not leak your implementation details into the developer workflow.’

00:02:23.540 --> 00:02:27.540
Just two of the many insights from that talk.

00:02:27.540 --> 00:02:28.540
2017…

00:02:28.540 --> 00:02:32.420
And yet today we still bother developers with YAML.

00:02:32.420 --> 00:02:34.220
Or worse: tickets.

00:02:34.220 --> 00:02:37.380
But there's hope!

00:02:37.380 --> 00:02:41.380
Platform Engineering is gaining momentum as a critical enabler for DevOps teams.

00:02:41.380 --> 00:02:46.380
I've dived into the traction around Platform Engineering and connected the dots for you,

00:02:46.380 --> 00:02:52.060
to paint a clear picture of how and why DevOps has evolved into Platform Engineering.

00:02:53.560 --> 00:03:01.720
Since I mention DevOps many times throughout this video, let's start with a disclaimer.

00:03:00.220 --> 00:03:07.220
When I talk about "DevOps", I'm referring to the mindset of ownership of the operational pipeline;

00:03:07.220 --> 00:03:13.220
the process of faster flow and feedback loops; the implementation of built-in automation and QA;

00:03:13.220 --> 00:03:19.380
and the enablement of teams to do everything they need related to their project.

00:03:19.380 --> 00:03:21.380
Breaking down silos.

00:03:21.680 --> 00:03:27.680
To address the unicorn in the room: I'm not talking about "DevOps engineers".

00:03:27.680 --> 00:03:31.680
Is there even such a thing as a DevOps engineer?

00:03:31.680 --> 00:03:35.680
The consultant in me would say: it depends.

00:03:35.880 --> 00:03:43.240
I think it's already hard for a "2 pizza team" to be full-stack knowledgeable, let alone a single engineer.

00:03:44.040 --> 00:03:51.519
As Viktor Farcic puts it: ‘I do not believe there is such a thing as a DevOps engineer.'

00:03:51.519 --> 00:03:55.640
If the whole point of DevOps is to enable communication and collaboration'

00:03:55.640 --> 00:03:59.295
'between people who work in Development and those who work in Operations,

00:03:59.295 --> 00:04:01.556
then what does a DevOps engineer do?'

00:04:02.019 --> 00:04:04.460
'That’s just a different title for the same job.’

00:04:05.380 --> 00:04:12.940
On the other hand, if a team or organization applies a DevOps mindset and amplifies that into a job title, why not?

00:04:14.340 --> 00:04:20.140
To quote The Rabbi (played by Ben Kingsley) in the movie "Lucky Number Slevin":

00:04:20.140 --> 00:04:24.060
'The first time someone calls you a horse you punch him on the nose,'

00:04:24.060 --> 00:04:27.380
'the second time someone calls you a horse you call him a jerk,'

00:04:27.380 --> 00:04:33.840
'but the third time someone calls you a horse, well then perhaps it's time to go shopping for a saddle.'

00:04:34.540 --> 00:04:37.300
Just don't expect a horse to be a unicorn.

00:04:37.300 --> 00:04:42.900
If you have DevOps engineers toiling away in a DevOps team, you’re not doing DevOps.

00:04:42.900 --> 00:04:46.140
And if you have a DevOps engineer job title yourself, don't worry—

00:04:46.140 --> 00:04:49.620
I'm not putting all the responsibility on your shoulders!

00:04:50.020 --> 00:04:51.640
We're all in this together.

00:04:53.840 --> 00:04:56.000
Hello again, and welcome!

00:04:56.500 --> 00:05:02.660
So, why has Platform Engineering been gaining so much traction lately?

00:05:02.660 --> 00:05:07.940
Let's dive into some key insights from industry leaders to understand this evolution.

00:05:09.940 --> 00:05:17.700
To begin, let's rewind to 2021, when Thoughtworks published their opinionated guide to the technology landscape,

00:05:17.700 --> 00:05:20.980
Technology Radar Volume 24.

00:05:20.980 --> 00:05:29.100
One of their standout themes in this twice-yearly snapshot of tools, techniques, platforms, languages and frameworks?

00:05:29.100 --> 00:05:32.440
'Platform Teams Drive Speed to Market.'

00:05:34.940 --> 00:05:44.940
Thoughtworks stated: 'We consider Platform Engineering Product Teams to be a standard approach and a significant enabler of high-performing IT.'

00:05:44.940 --> 00:05:53.940
Have you already adopted this proven Platform Engineering approach, or are you (still) considering it?

00:05:53.940 --> 00:06:02.940
In 2022, Gartner spotlighted Platform Engineering in their “Top 10 Strategic Technology Trends for 2023”.

00:06:02.940 --> 00:06:13.940
They noted: 'Platform Engineering has emerged in response to the increasing cognitive load resulting from the complexity of modern software tools and architectures.'

00:06:13.940 --> 00:06:17.940
We'll delve deeper into cognitive load shortly.

00:06:17.940 --> 00:06:22.940
Gartner noticed something interesting and warned us in the same forecast:

00:06:22.940 --> 00:06:29.940
'Most enterprises will fail to scale DevOps initiatives without adopting shared self-service platform approaches.'

00:06:34.240 --> 00:06:36.740
Fast forward to 2023.

00:06:36.740 --> 00:06:40.740
McKinsey isn't simply jumping on the platform bandwagon here.

00:06:40.740 --> 00:06:50.240
They might not have been the first to recognize the need for a 'standardized engineering approach' to 'enable and empower developers to deliver software efficiently,'

00:06:50.240 --> 00:06:53.940
but they did lead the platform blueprint troops.

00:06:53.940 --> 00:06:58.940
More on blueprints in my video about Internal Developer Platforms (IDPs).

00:07:02.940 --> 00:07:10.940
We stay in 2023, as the “State of DevOps Report” dubbed Platform Engineering: 'The Cool New Kid in Town.'

00:07:11.940 --> 00:07:16.940
The report's subtitle? 'Platform Engineering Edition.'

00:07:17.940 --> 00:07:26.940
According to the authors, 'Platform engineering helps organizations realize the kinds of benefits that the DevOps movement has been aiming for all along.'

00:07:29.940 --> 00:07:38.940
And in 2024, the “State of DevOps Report” evolved further, titled: 'The Evolution of Platform Engineering.'

00:07:38.940 --> 00:07:44.940
If this trend continues, we’ll have a “State of PlatformOps Report” in 2025!

00:07:48.940 --> 00:07:52.440
What’s driving this evolution?

00:07:54.940 --> 00:08:03.940
Let's revisit 2021, when the “State of DevOps Report” noted many teams were unable to move from medium to high performers.

00:08:03.940 --> 00:08:08.940
They called this phenomenon: 'Stuck in the middle.'

00:08:08.940 --> 00:08:14.940
Why do you think so many teams struggle to move from medium to high performance?

00:08:14.940 --> 00:08:26.940
Interestingly, “Gartner's Top 10 Trends Impacting Infrastructure &amp; Operations for 2020” already listed 'Scaling DevOps agility' as the number 3 trend.

00:08:26.940 --> 00:08:37.440
They stated: 'By 2023, 90% of enterprises will fail to scale DevOps initiatives if they do not create a shared self-service platform.'

00:08:38.440 --> 00:08:43.440
It's worth noting that Gartner didn't use the term Platform Engineering at this point.

00:08:44.940 --> 00:08:50.940
By 2024, the conversation had evolved.

00:08:47.940 --> 00:08:58.940
Manuel Pais, co-author of “Team Topologies”, delivered a talk titled: 'Frozen DevOps? The Not-So-Technical Last Mile.'

00:08:58.940 --> 00:09:06.940
Pais pointed to cognitive load as the root cause and proposed platform teams as the solution.

00:09:07.940 --> 00:09:13.940
Now, let's explore this concept of cognitive load further.

00:09:13.940 --> 00:09:19.940
At the “PlatformCon 2023” conference, Charity Majors explained in her spot-on

00:09:19.940 --> 00:09:24.940
'The future of Ops is platform engineering' talk why the Ops landscape is shifting.

00:09:26.940 --> 00:09:28.940
Let's focus on this trend:

00:09:28.940 --> 00:09:32.940
'Everybody writes code, runs the code they write.'

00:09:32.940 --> 00:09:35.940
This sounds familiar, doesn't it?

00:09:37.940 --> 00:09:40.940
DevOps, indeed.

00:09:40.940 --> 00:09:46.440
This aligns with the famous 'You build it, you run it' DevOps mantra

00:09:46.440 --> 00:09:50.940
from Werner Vogels, Amazon's CTO, in 2006.

00:09:50.940 --> 00:09:57.240
Over time, it evolved to: 'You build it, you own it.'

00:09:57.940 --> 00:10:02.940
Ownership sounds great, but what does true ownership really mean?

00:10:02.940 --> 00:10:10.940
Alex Ewerlöf, in his blog post “You Build It, you own it” defines true ownership as the intersection of:

00:10:10.940 --> 00:10:22.440
“Responsibility”: Owning the outcome. “Mandate”: Authority to act. “Knowledge”: Skills to make informed decisions.

00:10:22.440 --> 00:10:33.540
This framework helps us understand where broken ownership occurs and why reducing cognitive load requires aligning responsibility, mandate, and knowledge.

00:10:33.540 --> 00:10:38.540
How well do teams in your organization align these three aspects?

00:10:38.540 --> 00:10:45.540
When one of these is missing, then broken ownership emerges, leading to anti-patterns.

00:10:45.540 --> 00:10:47.540
Let’s explore some examples.

00:10:48.940 --> 00:10:54.940
Without responsibility, we get the 'broken DevOps' scenario:

00:10:54.940 --> 00:11:01.940
tossing the code over the metaphorical “wall of confusion” for the infrastructure team to run.

00:11:01.940 --> 00:11:04.940
I'm glad we've moved past that stage!

00:11:04.940 --> 00:11:05.940
(Right?!)

00:11:07.940 --> 00:11:12.240
Without knowledge, we get the 'NoOps' scenario:

00:11:12.240 --> 00:11:19.240
Those with mandate and responsibility can't make the right decisions or even understand their full responsibility.

00:11:19.240 --> 00:11:28.240
But even with textbook DevOps and a team that does understand their full ‘you build it, you run it’ responsibilities,

00:11:29.240 --> 00:11:33.240
is it realistic to expect teams to be full-stack knowledgeable?

00:11:34.740 --> 00:11:40.740
Today’s DevOps ecosystem demands vast knowledge across development and operations.

00:11:40.740 --> 00:11:49.740
The complexity of this modern software development lifecycle often leads to tool sprawl and 'DIY' platforms within teams.

00:11:49.740 --> 00:11:54.240
Meanwhile, Ops is just getting harder and harder.

00:11:55.740 --> 00:12:01.240
Can you already see the cognitive burden in this ecosystem example?

00:12:01.240 --> 00:12:06.740
How do we expect teams to innovate when navigating this sprawling complexity every day?

00:12:10.740 --> 00:12:16.740
To illustrate this further, ‘your honor, I ask to admit exhibit A into evidence.’

00:12:16.740 --> 00:12:21.240
‘No further questions, your honor!’

00:12:22.440 --> 00:12:27.440
This Dilbert comic humorously captures a common challenge in DevOps:

00:12:27.440 --> 00:12:33.440
engineers end up building and managing their own platforms instead of focusing on product development.

00:12:34.440 --> 00:12:44.940
It highlights how the lack of a dedicated platform shifts attention away from delivering value to customers, increasing inefficiencies and cognitive load.

00:12:48.440 --> 00:12:55.320
Without a dedicated platform team, individual DevOps teams build their own platforms and pipelines—

00:12:55.320 --> 00:12:59.120
whether they know it or not.

00:12:59.120 --> 00:13:05.220
This decentralized setup turns every team into their own version of 'Dilbert.'

00:13:05.220 --> 00:13:10.720
This fragmented approach: distracts developers from solving business problems, decreasing velocity;

00:13:10.720 --> 00:13:20.560
leads to inefficiencies with overlapping tools, processes, and duplicated effort, increasing operational costs and risks;

00:13:20.560 --> 00:13:24.340
and increases cognitive load.

00:13:25.340 --> 00:13:31.220
As Paula Kennedy highlighted at “PlatformCon 2022”, the equation is simple:

00:13:31.220 --> 00:13:38.360
more tools + more responsibilities = more cognitive load.

00:13:38.360 --> 00:13:45.040
The cloud-native landscape degrades the developer experience due to: the complexity of cloud-native technologies;

00:13:45.040 --> 00:13:52.900
fragmentation; the learning curve hurdle; handling operational tasks; the web of dependencies;

00:13:52.900 --> 00:13:56.400
and staying on top of new developments.

00:13:56.400 --> 00:13:59.780
It all adds up to the cognitive load.

00:13:59.780 --> 00:14:06.700
More and more functions are also 'shifting left' into the developer's remit, adding to their burden.

00:14:09.360 --> 00:14:15.640
At “stackconf 2022” in Berlin, Hannah Foxwell showed us what happens if we’re

00:14:15.640 --> 00:14:17.840
'Shifting Left the Wrong Way'.

00:14:17.840 --> 00:14:22.940
If DevOps is more pipedream than pipeline and trust issues between Dev and Ops return,

00:14:22.940 --> 00:14:26.080
then even #NoOps can get traction.

00:14:26.080 --> 00:14:35.080
And, less dramatically, in textbook DevOps settings, 'you build it, you run it' results in throwing complexity left.

00:14:35.160 --> 00:14:40.160
The harder things are to do that don't directly impact value to customers,

00:14:40.160 --> 00:14:42.560
the less likely they are prioritized.

00:14:42.560 --> 00:14:46.840
This Ops work sinks to the bottom of the team's backlog.

00:14:50.620 --> 00:14:52.820
Let me share a personal anecdote.

00:14:52.820 --> 00:14:57.300
I have a hoodie that says, 'If nothing goes right, shift left.'

00:14:57.300 --> 00:15:02.000
It's a fun reminder of the importance of shifting left in our processes.

00:15:02.000 --> 00:15:07.180
But as we've seen, simply shifting everything left isn't the solution.

00:15:07.180 --> 00:15:13.480
We need to do it thoughtfully and strategically to avoid a ‘shift left, and nothing goes right.’

00:15:13.480 --> 00:15:17.420
Then shift left becomes pile left.

00:15:17.420 --> 00:15:22.980
The whole idea of 'shift left' is adding a task earlier in the software development process,

00:15:22.980 --> 00:15:30.420
aiming to shorten feedback loops and achieve an outcome—working software—earlier.

00:15:31.620 --> 00:15:36.620
Successfully shifting left requires more than just moving tasks earlier in the process.

00:15:36.620 --> 00:15:41.060
NoOps isn't the answer, nor is piling everything left.

00:15:41.060 --> 00:15:45.060
The old siloed way won't work either.

00:15:45.060 --> 00:15:49.560
How can we shift left effectively without burning out our teams?

00:15:51.160 --> 00:15:56.560
The key is how we organize teams around the different problem domains.

00:15:56.560 --> 00:15:59.060
'Good fences make good neighbors',

00:15:59.060 --> 00:16:02.260
as Robert Frost wrote in his poem "Mending Wall".

00:16:02.260 --> 00:16:05.260
This idea applies to our teams as well—

00:16:05.260 --> 00:16:08.860
clear boundaries and ownership are crucial.

00:16:08.860 --> 00:16:13.019
No delegation of work, but providing services to other teams instead.

00:16:13.040 --> 00:16:16.319
Now the 'shift left' is within the domain scopes,

00:16:16.320 --> 00:16:19.400
with their own build-measure-learn feedback loops.

00:16:22.400 --> 00:16:24.160
But why is this so important?

00:16:25.460 --> 00:16:32.180
Because ‘software that is 'too big for our heads' works against organizational agility.'

00:16:32.180 --> 00:16:39.260
This quote from the “DevOps Enterprise Summit 2019” highlights the core challenge of modern software systems:

00:16:39.260 --> 00:16:41.260
cognitive load.

00:16:41.260 --> 00:16:42.400
Think about it—

00:16:42.400 --> 00:16:48.000
have you ever felt like you're juggling too many tasks or can’t oversee the full picture any longer,

00:16:48.000 --> 00:16:50.080
and your brain is about to explode?

00:16:50.100 --> 00:16:52.540
That's cognitive overload.

00:16:52.560 --> 00:16:57.000
Team members might not say they're experiencing cognitive overload,

00:16:57.000 --> 00:17:04.720
but they often express it in other ways, like saying, 'I have too much on my plate right now,' or struggling to focus.

00:17:04.800 --> 00:17:07.200
Recognizing these signals is crucial.

00:17:09.200 --> 00:17:14.840
Matthew Skelton and Manuel Pais introduced Team Topologies to tackle this issue.

00:17:14.840 --> 00:17:20.439
Their approach emphasizes designing systems and teams to: minimize cognitive load;

00:17:20.440 --> 00:17:25.220
enable agility; and focus on delivering value.

00:17:25.220 --> 00:17:30.980
As the authors of Team Topologies put it, it's all about 'a team-first approach to software boundaries.'

00:17:33.480 --> 00:17:40.440
This is perhaps the most impactful slide in their “Start with Team Cognitive Load” presentation.

00:17:40.440 --> 00:17:47.480
‘Each service must be fully owned by a team with sufficient cognitive capacity to build and operate it.'

00:17:47.480 --> 00:17:52.220
This sentence embodies the 'you build it, you own it' mindset,

00:17:52.220 --> 00:17:56.820
and it addresses the cognitive load that comes with this DevOps approach.

00:17:56.820 --> 00:18:02.700
Imagine trying to solve a complex puzzle without having all the pieces.

00:18:02.700 --> 00:18:08.579
That's what it's like when teams don't have the cognitive capacity to handle their responsibilities.

00:18:08.579 --> 00:18:14.260
It's important to note that Team Topologies looks at cognitive load at the team level,

00:18:14.260 --> 00:18:16.860
not at the individual level.

00:18:16.860 --> 00:18:22.460
By ensuring that teams have the cognitive capacity to handle their responsibilities,

00:18:22.460 --> 00:18:25.499
we can create more effective and sustainable systems.

00:18:27.779 --> 00:18:30.740
And we’re back at the three perspectives of true ownership.

00:18:34.840 --> 00:18:40.520
Looking at this timeline, can you imagine how overwhelming it must be for developers

00:18:40.520 --> 00:18:47.999
to keep up with all these increasing knowledge areas and responsibilities over the last 20 years?

00:18:48.000 --> 00:18:53.540
The cognitive load surely has risen tremendously.

00:18:54.740 --> 00:19:00.660
At “DevOpsDays 2022”, Michael Coté presented a compelling perspective in his talk,

00:19:00.660 --> 00:19:03.080
'The Eternal Recurrence of DevOps.'

00:19:03.080 --> 00:19:05.660
He highlighted the bigger DevOps picture:

00:19:05.680 --> 00:19:12.260
we, as an industry, reinvent the application stack every 5 to 10 years.

00:19:12.260 --> 00:19:16.420
We're currently in the midst of rebuilding everything once again,

00:19:16.460 --> 00:19:20.580
largely due to Kubernetes resetting the infrastructure layer.

00:19:20.580 --> 00:19:27.580
This shift requires the creation of a new set of management tools and application development stacks.

00:19:27.600 --> 00:19:31.280
After all, Kubernetes is 'a platform for building platforms,'

00:19:31.320 --> 00:19:35.180
so now we get to build the platforms.

00:19:35.199 --> 00:19:37.560
But who is “we” here?

00:19:37.560 --> 00:19:47.980
Kelsey Hightower nailed it when he tweeted: ‘Kubernetes allows you to declare your infrastructure concerns. The problem is we asked developers to do all that.’

00:19:50.780 --> 00:20:00.280
We've seen the challenges: cognitive overload, inefficiencies, and the struggle to keep up with the ever-evolving landscape of modern Ops.

00:20:00.280 --> 00:20:03.160
It's like trying to swim upstream in a raging river—

00:20:03.160 --> 00:20:06.240
exhausting and futile.

00:20:06.240 --> 00:20:10.960
But what if there was a way to simplify this complexity?

00:20:10.960 --> 00:20:16.000
Imagine a world where developers have the tools and support they need at their fingertips,

00:20:16.000 --> 00:20:20.160
where they can focus on what they do best—building great products—

00:20:20.160 --> 00:20:23.340
without being hindered by the operational burdens.

00:20:23.340 --> 00:20:27.480
This is the promise of Platform Engineering.

00:20:27.480 --> 00:20:31.280
So, how does Platform Engineering achieve this?

00:20:31.280 --> 00:20:37.240
Let's dive into the specifics and explore how it can transform the way we approach modern Ops.

00:20:39.820 --> 00:20:43.100
Team Topologies goes beyond identifying the problem—

00:20:43.100 --> 00:20:44.940
it offers actionable guidance.

00:20:44.940 --> 00:20:48.260
Imagine trying to carry a load that's too heavy;

00:20:48.260 --> 00:20:50.460
eventually, you'll drop it.

00:20:50.460 --> 00:20:54.940
By aligning the scope of software systems with a team's cognitive capacity,

00:20:54.940 --> 00:20:59.100
we avoid overburdening teams and ensure they remain effective and autonomous.

00:21:01.720 --> 00:21:07.400
To reduce cognitive load, Team Topologies introduces four fundamental topologies,

00:21:07.400 --> 00:21:14.960
three of which are specifically designed to offload work from product teams (stream-aligned teams).

00:21:14.960 --> 00:21:21.920
Platform teams play a critical role as a backbone, easing the cognitive burden and ensuring stream-aligned teams

00:21:21.920 --> 00:21:25.480
can stay focused on delivering business outcomes.

00:21:25.480 --> 00:21:31.320
They simplify and bring increased efficiency to tasks previously assigned to DevOps teams.

00:21:33.720 --> 00:21:38.960
Team Topologies provides a mental model of well-defined concepts and a clear language,

00:21:38.960 --> 00:21:43.760
making it extremely suitable as a conversation starter.

00:21:43.760 --> 00:21:50.720
The shared vocabulary for describing teams (and their interactions) provides clarity of purpose for Platform Engineering teams.

00:21:50.720 --> 00:21:56.720
It's like building a modern-day Tower of Babel, but with everyone speaking the same language.

00:21:59.640 --> 00:22:01.620
As the authors of Team Topologies put it:

00:22:01.620 --> 00:22:07.160
'Platform engineering is a way of thinking and team-of-teams design.'

00:22:07.160 --> 00:22:10.560
So, what is this way of thinking, this mindset?

00:22:13.640 --> 00:22:17.340
This quote encapsulates the essence of Platform Teams:

00:22:17.340 --> 00:22:28.079
'Platform Teams provide services that reduce cognitive load and accelerate stream-aligned teams to deliver work with substantial autonomy.'

00:22:28.079 --> 00:22:34.540
It’s an approach that focuses on enabling teams to work efficiently and autonomously within a team-of-teams design.

00:22:34.540 --> 00:22:41.339
It provides the foundation for scalable collaboration by reducing cognitive load, streamlining interactions,

00:22:41.340 --> 00:22:46.520
and aligning teams through shared platforms and standardized practices.

00:22:46.520 --> 00:22:52.500
Now, let's see what this transition from decentralized platforms per DevOps team to centralized platform teams looks like.

00:22:55.560 --> 00:23:04.320
A dedicated platform team serves as the central hub, coordinating across critical functions such as security and compliance.

00:23:04.320 --> 00:23:07.320
This approach offers multiple benefits:

00:23:07.320 --> 00:23:15.939
reduced inter-team dependencies, streamlining workflows; cost optimization, as shared tools prevent redundancy;

00:23:15.939 --> 00:23:21.080
and developer focus, freeing engineers to innovate and solve business challenges.

00:23:21.080 --> 00:23:27.760
In some ways, platform engineering simplifies the SDLC (software development lifecycle).

00:23:27.760 --> 00:23:37.840
By consolidating fragmented efforts, Platform Engineering not only drives operational efficiency but also reduces cognitive load,

00:23:37.860 --> 00:23:42.540
clearing the way for DevOps teams to achieve their full value-creating potential.

00:23:45.000 --> 00:23:51.320
To truly reduce cognitive load, platforms must address the challenges their users—developers—face.

00:23:51.320 --> 00:23:55.880
Effective platforms are more than standardized tools or infrastructure;

00:23:55.940 --> 00:24:01.420
they must provide real value to developers by solving their day-to-day problems.

00:24:01.420 --> 00:24:05.740
This is why platform teams must adopt a product mindset.

00:24:05.740 --> 00:24:12.480
It's not just about building technology but creating a compelling product that developers want to use.

00:24:12.480 --> 00:24:19.060
Feedback loops, iterative improvements, and a focus on usability are key to this approach.

00:24:19.560 --> 00:24:23.720
We'll dive deeper into Platform-as-a-Product in another episode.

00:24:23.780 --> 00:24:31.860
For now, remember: the success of a platform depends on how well it empowers developers to deliver with speed and confidence.

00:24:34.520 --> 00:24:44.060
To summarize, DevOps dismantled silos and transformed how we approach software development, increasing agility and easing collaboration.

00:24:44.060 --> 00:24:53.480
However, the cognitive load of managing all the complexity of modern Ops introduced new challenges.

00:24:53.480 --> 00:24:59.340
Modern Ops platforms like Kubernetes are meant to abstract resource management.

00:24:59.340 --> 00:25:01.600
However, the opposite is true:

00:25:01.620 --> 00:25:06.380
dozens of new tools and technologies are required to support them.

00:25:06.380 --> 00:25:14.380
When complexity reaches this level, as it has done in many technological advancements in the past, the solution pattern repeats:

00:25:14.380 --> 00:25:17.300
we have to abstract again.

00:25:17.300 --> 00:25:30.700
Platform Engineering addresses the modern Ops challenges by providing this crucial abstraction layer, simplifying the complexity and enabling DevOps to reach its full potential.

00:25:30.700 --> 00:25:36.280
Platform Engineering teams are like internal operational services for DevOps teams.

00:25:36.280 --> 00:25:49.080
They design, architect, maintain, interconnect, and secure self-service platforms on which software is executed with all the resources developers need to deliver applications.

00:25:49.080 --> 00:25:57.000
The big difference between the "wall of confusion" in the silo ages and the "good fences" of Platform Engineering?

00:25:57.000 --> 00:26:10.800
Modern Ops experts codify their knowledge, transform it into a service, and plug it into the platform so that everyone else can do it themselves instead of asking you to do things for them (“TicketOps”).

00:26:10.800 --> 00:26:17.600
They focus on managing those services rather than managing requests from people to do something.

00:26:19.500 --> 00:26:26.899
Far from being the death of DevOps, Platform Engineering represents its natural evolution.

00:26:26.899 --> 00:26:34.979
Platform Engineering is what you get when you fully commit to the idea that software engineers should own their code in production.

00:26:34.979 --> 00:26:46.219
It's about the convergence of developers and Ops, where, in the words of Charity Majors, everybody writes code and owns what they write. DevOps as it should be.

00:26:46.220 --> 00:26:50.160
Platform Engineering doesn't replace DevOps—it amplifies it.

00:26:50.220 --> 00:26:53.220
No longer stuck in the middle.

00:26:55.720 --> 00:26:59.800
In conclusion, that Cool New Kid in Town is here to stay!

00:27:01.700 --> 00:27:04.800
‘One more thing…’

00:27:04.800 --> 00:27:09.540
There's an important aspect of true ownership that we haven't covered yet.

00:27:12.640 --> 00:27:19.680
We have seen how the DevOps mindset fixed responsibility by taking down the “wall of confusion”.

00:27:19.680 --> 00:27:26.980
And how a Platform Engineering way of thinking can fix the knowledge aspect by offloading the cognitive burden with “good fences”.

00:27:26.980 --> 00:27:31.700
But we haven’t talked about another anti-pattern: the absence of a mandate.

00:27:33.700 --> 00:27:39.200
Without mandate, you can’t drive any meaningful and impactful change.

00:27:39.200 --> 00:27:48.800
This mandate is essential to fully own your platform instead of only running it; to be able to treat your platform as a product.

00:27:48.800 --> 00:27:51.079
And it doesn’t stop there.

00:27:51.100 --> 00:27:57.200
Mandate also implies a clear platform positioning in a broader teams-of-teams design.

00:27:57.200 --> 00:28:00.359
Don’t forget this critical success factor!

00:28:02.840 --> 00:28:04.880
Thank you for watching!

00:28:04.880 --> 00:28:09.360
I hope you found this session insightful and engaging.

00:28:09.360 --> 00:28:13.740
If you liked this video, why not share it with your peers?

00:28:13.740 --> 00:28:19.460
Feel free to reach out if you'd like to discuss platforms and Platform Engineering further.

00:28:19.460 --> 00:28:28.819
Oh, and by the way, did you know this entire presentation was narrated by an AI voice model based on my own voice?

00:28:28.860 --> 00:28:30.240
Pretty cool, right?

00:28:30.259 --> 00:28:32.999
I look forward to seeing you in other videos!

00:28:35.699 --> 00:28:38.459
Thank you for sticking around to the end.

00:28:38.459 --> 00:28:43.580
The remainder of this video contains an overview of all resources used.

00:28:44.080 --> 00:28:48.080
There's some great stuff out there, often with references to even more great stuff.

00:28:48.140 --> 00:28:50.640
Are you ready to go down this rabbit hole?